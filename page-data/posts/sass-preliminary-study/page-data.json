{"componentChunkName":"component---src-templates-post-tsx","path":"/posts/sass-preliminary-study/","result":{"data":{"markdownRemark":{"html":"<h2>为什么学 Sass</h2>\n<p>说起来其实很早就知道 <code>Sass</code> 这东西。刚开始写 Even 这个博客主题的时候就有在考虑是要用 <code>Less</code> 还是<code>Sass</code>，最后用了变量名用 <code>@</code> 开头的 Less（可能是 PHP 的原因，对 <code>$</code> 开头的变量名没什么好感）。</p>\n<p>最近正在看 <code>Foundation</code>，源码是用 Sass 写的。<code>Bootstrap</code> 之前也是用 Less 的，不过后来也转向了 Sass。然后发现 <code>Foundation</code> 写得挺不错的，看看博客主题写的代码，简直不能看。正好打算把主题给重构重构，就顺手学学 Sass，用 Sass 写。</p>\n<!--more-->\n<h2>Sass 是什么</h2>\n<p>Sass 是CSS的扩展，增加了规则嵌套、变量、混合、选择器继承等等，通过使用命令行的工具把它转换成CSS代码，能够更编程语言化的写 CSS。</p>\n<p>Sass 有两种语法，<code>Sass</code> 与 <code>SCSS</code>。<code>Sass</code> 使用的是类似于 Python 的缩进语法，而 <code>SCSS</code> 使用的语法与 CSS 相近，只是添加了一些其他的东西，可以看做是 CSS 超集。</p>\n<p>PS: 使用 <code>SCSS</code> 语法的文件后缀是 <code>SCSS</code> （一定是大写）。</p>\n<h2>SCSS 语法</h2>\n<h3>变量</h3>\n<p>上面说了，刚开始我不用 Sass 的原因就是变量名是以 <code>$</code> 开头的。与 Less 不同的是，Sass 的变量赋值使用的是 <code>:</code>，跟 CSS 的属性赋值相同。</p>\n<pre><code class=\"language-scss\">// sass style\n$fontSize: 14px;\nspan {\n  font-size: $fontSize;\n}\n\n// css style\nspan {\n  font-size: 14px;\n}\n</code></pre>\n<p>Sass 还支持多值变量，list 类型与 map 类型，与 JavaScript 中的 list, map 相似。</p>\n<p>list 类型可以使用 <code>nth($list, $index)</code> 来取得 list 中的某个值，相同的 map 也有对应的取值的函数：<code>map-get($map, $key)</code>。</p>\n<p>list 类型：</p>\n<pre><code class=\"language-scss\">// sass style\n$color-list: #fff, #000;\na {\n  color: nth($color-list, 1);\n\n  &#x26;:hover {\n    color: nth($color-list, 2);\n  }\n}\n</code></pre>\n<p>map 类型：</p>\n<pre><code class=\"language-scss\">// sass style\n$color-map: (\n  white: #fff,\n  black: #000\n);\na {\n  color: map-get($color-map, white);\n\n  &#x26;:hover {\n    color: map-get($color-map, black);\n  }\n}\n</code></pre>\n<h3>嵌套</h3>\n<p>与大部分 CSS 预处理器相同，Sass 也支持层级嵌套。这样可以更好的表示 CSS 的层级关系。</p>\n<pre><code class=\"language-scss\">// sass style\nul {\n  margin: 5px;\n\n  li {\n    list-style: none;\n  }\n}\n\n// css style\nul {\n  margin: 5px;\n}\n\nul li {\n  list-style: none;\n}\n</code></pre>\n<h3>混合</h3>\n<p>Sass 中使用 <code>@mixin</code> 声明混合，可以传递参数，多个参数以逗号分开，也可以给参数设置默认值。声明的@mixin通过@include来调用。</p>\n<pre><code class=\"language-scss\">//sass style\n@mixin center-block {\n    margin-left:auto;\n    margin-right:auto;\n}\n.demo{\n    @include center-block;\n}\n\n//css style\n.demo{\n    margin-left:auto;\n    margin-right:auto;\n}\n</code></pre>\n<h3>条件与循环</h3>\n<p>一般的 CSS 是没有条件与循环的，拥有了条件与循环语句的 Sass 更加的灵活，可以使得 CSS 样式根据变量而改变。</p>\n<h4>条件</h4>\n<p>Sass 中的条件语句为 <code>@if</code> 与 <code>@else</code>, 可以组合成为 <code>@else if</code>。</p>\n<pre><code class=\"language-scss\">// sass style\n$color: white;\np {\n  @if $color == white {\n    color: #fff;\n  }\n  @else {\n    color: #000;\n  }\n}\n\n// css style\np {\n  color: #fff;\n}\n</code></pre>\n<h4>循环</h4>\n<p>for循环有两种形式，分别为：<code>@for $var from &#x3C;start> through &#x3C;end></code> 和 <code>@for $var from &#x3C;start> to &#x3C;end></code>。<code>through</code> 与 <code>to</code> 的区别是循环包不包括 <code>&#x3C;end></code>。</p>\n<pre><code class=\"language-scss\">// sass style\n@for $i from 1 through 3 {\n  .item-#{$i} { width: 2em * $i; }\n}\n\n// css style\n.item-1 {\n  width: 2em;\n}\n.item-2 {\n  width: 4em;\n}\n.item-3 {\n  width: 6em;\n}\n</code></pre>\n<p>each循环语法为：<code>@each $var in &#x3C;list or map></code>，与 JavaScript 中的 <code>each</code> 类似，即是遍历 list 或者 map。</p>\n<pre><code class=\"language-scss\">// sass style\n$color-list: red green yellow;\n@each $color in $color-list {\n  .#{$color} {\n    color: $color;\n  }\n}\n\n// css style\n.red {\n  color: red;\n}\n.green {\n  color: green;\n}\n.yellow {\n  color: yellow;\n}\n</code></pre>","rawMarkdownBody":"\n## 为什么学 Sass\n\n说起来其实很早就知道 `Sass` 这东西。刚开始写 Even 这个博客主题的时候就有在考虑是要用 `Less` 还是`Sass`，最后用了变量名用 `@` 开头的 Less（可能是 PHP 的原因，对 `$` 开头的变量名没什么好感）。\n\n最近正在看 `Foundation`，源码是用 Sass 写的。`Bootstrap` 之前也是用 Less 的，不过后来也转向了 Sass。然后发现 `Foundation` 写得挺不错的，看看博客主题写的代码，简直不能看。正好打算把主题给重构重构，就顺手学学 Sass，用 Sass 写。\n<!--more-->\n\n## Sass 是什么\n\nSass 是CSS的扩展，增加了规则嵌套、变量、混合、选择器继承等等，通过使用命令行的工具把它转换成CSS代码，能够更编程语言化的写 CSS。\n\nSass 有两种语法，`Sass` 与 `SCSS`。`Sass` 使用的是类似于 Python 的缩进语法，而 `SCSS` 使用的语法与 CSS 相近，只是添加了一些其他的东西，可以看做是 CSS 超集。\n\nPS: 使用 `SCSS` 语法的文件后缀是 `SCSS` （一定是大写）。\n\n## SCSS 语法\n\n### 变量\n上面说了，刚开始我不用 Sass 的原因就是变量名是以 `$` 开头的。与 Less 不同的是，Sass 的变量赋值使用的是 `:`，跟 CSS 的属性赋值相同。\n\n```scss\n// sass style\n$fontSize: 14px;\nspan {\n  font-size: $fontSize;\n}\n\n// css style\nspan {\n  font-size: 14px;\n}\n```\n\nSass 还支持多值变量，list 类型与 map 类型，与 JavaScript 中的 list, map 相似。\n\nlist 类型可以使用 `nth($list, $index)` 来取得 list 中的某个值，相同的 map 也有对应的取值的函数：`map-get($map, $key)`。\n\nlist 类型：\n```scss\n// sass style\n$color-list: #fff, #000;\na {\n  color: nth($color-list, 1);\n\n  &:hover {\n    color: nth($color-list, 2);\n  }\n}\n```\n\nmap 类型：\n```scss\n// sass style\n$color-map: (\n  white: #fff,\n  black: #000\n);\na {\n  color: map-get($color-map, white);\n\n  &:hover {\n    color: map-get($color-map, black);\n  }\n}\n```\n\n### 嵌套\n与大部分 CSS 预处理器相同，Sass 也支持层级嵌套。这样可以更好的表示 CSS 的层级关系。\n\n```scss\n// sass style\nul {\n  margin: 5px;\n\n  li {\n    list-style: none;\n  }\n}\n\n// css style\nul {\n  margin: 5px;\n}\n\nul li {\n  list-style: none;\n}\n```\n\n### 混合\nSass 中使用 `@mixin` 声明混合，可以传递参数，多个参数以逗号分开，也可以给参数设置默认值。声明的@mixin通过@include来调用。\n\n```scss\n//sass style\n@mixin center-block {\n    margin-left:auto;\n    margin-right:auto;\n}\n.demo{\n    @include center-block;\n}\n\n//css style\n.demo{\n    margin-left:auto;\n    margin-right:auto;\n}\n```\n\n### 条件与循环\n一般的 CSS 是没有条件与循环的，拥有了条件与循环语句的 Sass 更加的灵活，可以使得 CSS 样式根据变量而改变。\n\n#### 条件\nSass 中的条件语句为 `@if` 与 `@else`, 可以组合成为 `@else if`。\n```scss\n// sass style\n$color: white;\np {\n  @if $color == white {\n    color: #fff;\n  }\n  @else {\n    color: #000;\n  }\n}\n\n// css style\np {\n  color: #fff;\n}\n```\n\n#### 循环\nfor循环有两种形式，分别为：`@for $var from <start> through <end>` 和 `@for $var from <start> to <end>`。`through` 与 `to` 的区别是循环包不包括 `<end>`。\n\n```scss\n// sass style\n@for $i from 1 through 3 {\n  .item-#{$i} { width: 2em * $i; }\n}\n\n// css style\n.item-1 {\n  width: 2em;\n}\n.item-2 {\n  width: 4em;\n}\n.item-3 {\n  width: 6em;\n}\n```\n\neach循环语法为：`@each $var in <list or map>`，与 JavaScript 中的 `each` 类似，即是遍历 list 或者 map。\n\n```scss\n// sass style\n$color-list: red green yellow;\n@each $color in $color-list {\n  .#{$color} {\n    color: $color;\n  }\n}\n\n// css style\n.red {\n  color: red;\n}\n.green {\n  color: green;\n}\n.yellow {\n  color: yellow;\n}\n```\n","frontmatter":{"title":"Sass 初探","date":"2016年6月7日","tags":["CSS","Sass"]}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/sass-preliminary-study/"}}}