{"componentChunkName":"component---src-templates-post-tsx","path":"/posts/posts/something-about-javaScript-inherit/","result":{"data":{"markdownRemark":{"html":"<p>众所周知，JavaScript 的继承是实现继承，而没有 Java 中的接口继承。这是因为 JavaScript 中函数没有签名，而实现继承依靠的是原型链来实现的。</p>\n<h2>原型链继承</h2>\n<p>JavaScript 中通过修改对象原型指向的对象来实现继承，即是将一个对象的原型指向要继承的对象实例，从而实现继承对象的属性及方法。</p>\n<!--more-->\n<pre><code class=\"language-js\">function SuperType() {\n  this.type = 'super';\n}\n\nSuperType.prototype.getType() {\n  return this.type;\n}\n\nfunction SubType() {\n  this.type = 'sub';\n}\n\nSubType.prototype = new SuperType();\n\nvar sub = new SubType();\nconsole.log(sub.getType()); // \"sub\"\n</code></pre>\n<h3>原型链继承的不足</h3>\n<p>实际上，上面的代码还缺少一句代码，我们将 SubType 的原型指向了 SuperType 的实例，即<code>SubType.prototype.constructor</code> 会返回 <code>SuperType</code> 而不是 <code>SubType</code>，使用 <code>instanceof</code> 操作符返回的将是 <code>SuperType</code>。所以需要将 <code>SubType.prototype.constructor</code> 重新指向 <code>SubType</code>。</p>\n<pre><code class=\"language-js\">// ...\nSubType.prototype = new SuperType();\nSubType.prototype.constructor = SubType;\n// ...\n</code></pre>\n<p>但即使是这样，原型链继承依然有两点问题：原型中的实例引用类型属性会在所有对象实例中共享，无法想 Java 的继承一样向父类的构造函数中传递参数。</p>\n<h2>其他继承方式</h2>\n<p>由于原型链继承存在一些不足，为了解决这些不足，JavaScript 中还有其他的几种继承的方式。</p>\n<h3>借用构造函数</h3>\n<p>因为原型链无法传递参数到父类的构造函数中，因此出现了这种叫做借用构造函数的技术。顾名思义，即是借用父类的构造函数在子类中进行调用。</p>\n<pre><code class=\"language-js\">function SuperType() {\n  // ...\n}\n\nfunction SubType() {\n  SuperType.call(this); // &#x3C;- 执行父类构造函数\n  // ...\n}\n</code></pre>\n<p>借用构造函数虽然解决了构造函数传参的问题，但是当父类拥有方法时每个子类的实例都会拥有独立的方法，这个问题与单独使用构造函数模式定义类型的时候相同。</p>\n<h3>组合继承</h3>\n<p>类比使用构造函数模式定义类型时的解决方法（组合构造函数模式与原型模式），继承时的解决方法也类似。即组合原型链继承和借用构造函数，属性由借用构造函数的方式继承，方法由原型链继承。</p>\n<p>实际上也就是在原型链继承的代码中添加在子类的构造函数中调用父类构造函数。</p>\n<pre><code class=\"language-js\">function SuperType() {\n  this.type = 'super';\n}\n\nSuperType.prototype.getType() {\n  return this.type;\n}\n\nfunction SubType() {\n  SuperType.call(this);\n  this.type = 'sub';\n}\n\nSubType.prototype = new SuperType();\nSubType.prototype.constructor = SubType;\n</code></pre>\n<h3>寄生组合式继承</h3>\n<p>组合继承是常用的继承方式，但是同样的也是有不足之处：调用了两次父类的构造函数，一次在子类构造函数中调用父类构造函数，一次在实例父类对象赋值给子类的原型。</p>\n<p>寄生组合式继承在指定子类的原型的时候不必调用父类的构造函数，而是直接使用 <code>Object.create()</code> 创建父类原型的副本。</p>\n<pre><code class=\"language-js\">function SuperType() {\n  // ...\n}\n\nfunction SubType() {\n  SuperType.call(this);\n  // ...\n}\n\nSubType.prototype = Object.create(SuperType.prototype); // 直接使用父类原型创建副本\nSubType.prototype.constructor = SubType;\n</code></pre>\n<h2>ES6 中的继承</h2>\n<p>ES6 引入了 <code>class</code> 关键子，可以像其他语言中一样使用 <code>extends</code> 关键字来继承。虽然能够使用 <code>extends</code> 实现继承，但实际上内部还是基于原型。</p>\n<pre><code class=\"language-js\">class SubType extends SuperType {\n  constructor() {\n    super();\n    // ...\n  }\n\n  // ...\n}\n</code></pre>","rawMarkdownBody":"\n众所周知，JavaScript 的继承是实现继承，而没有 Java 中的接口继承。这是因为 JavaScript 中函数没有签名，而实现继承依靠的是原型链来实现的。\n\n## 原型链继承\n\nJavaScript 中通过修改对象原型指向的对象来实现继承，即是将一个对象的原型指向要继承的对象实例，从而实现继承对象的属性及方法。\n\n<!--more-->\n\n``` js\nfunction SuperType() {\n  this.type = 'super';\n}\n\nSuperType.prototype.getType() {\n  return this.type;\n}\n\nfunction SubType() {\n  this.type = 'sub';\n}\n\nSubType.prototype = new SuperType();\n\nvar sub = new SubType();\nconsole.log(sub.getType()); // \"sub\"\n```\n\n### 原型链继承的不足\n实际上，上面的代码还缺少一句代码，我们将 SubType 的原型指向了 SuperType 的实例，即`SubType.prototype.constructor` 会返回 `SuperType` 而不是 `SubType`，使用 `instanceof` 操作符返回的将是 `SuperType`。所以需要将 `SubType.prototype.constructor` 重新指向 `SubType`。\n\n``` js\n// ...\nSubType.prototype = new SuperType();\nSubType.prototype.constructor = SubType;\n// ...\n```\n\n但即使是这样，原型链继承依然有两点问题：原型中的实例引用类型属性会在所有对象实例中共享，无法想 Java 的继承一样向父类的构造函数中传递参数。\n\n## 其他继承方式\n\n由于原型链继承存在一些不足，为了解决这些不足，JavaScript 中还有其他的几种继承的方式。\n\n### 借用构造函数\n因为原型链无法传递参数到父类的构造函数中，因此出现了这种叫做借用构造函数的技术。顾名思义，即是借用父类的构造函数在子类中进行调用。\n\n``` js\nfunction SuperType() {\n  // ...\n}\n\nfunction SubType() {\n  SuperType.call(this); // <- 执行父类构造函数\n  // ...\n}\n```\n\n借用构造函数虽然解决了构造函数传参的问题，但是当父类拥有方法时每个子类的实例都会拥有独立的方法，这个问题与单独使用构造函数模式定义类型的时候相同。\n\n### 组合继承\n类比使用构造函数模式定义类型时的解决方法（组合构造函数模式与原型模式），继承时的解决方法也类似。即组合原型链继承和借用构造函数，属性由借用构造函数的方式继承，方法由原型链继承。\n\n实际上也就是在原型链继承的代码中添加在子类的构造函数中调用父类构造函数。\n\n``` js\nfunction SuperType() {\n  this.type = 'super';\n}\n\nSuperType.prototype.getType() {\n  return this.type;\n}\n\nfunction SubType() {\n  SuperType.call(this);\n  this.type = 'sub';\n}\n\nSubType.prototype = new SuperType();\nSubType.prototype.constructor = SubType;\n```\n\n### 寄生组合式继承\n组合继承是常用的继承方式，但是同样的也是有不足之处：调用了两次父类的构造函数，一次在子类构造函数中调用父类构造函数，一次在实例父类对象赋值给子类的原型。\n\n寄生组合式继承在指定子类的原型的时候不必调用父类的构造函数，而是直接使用 `Object.create()` 创建父类原型的副本。\n\n``` js\nfunction SuperType() {\n  // ...\n}\n\nfunction SubType() {\n  SuperType.call(this);\n  // ...\n}\n\nSubType.prototype = Object.create(SuperType.prototype); // 直接使用父类原型创建副本\nSubType.prototype.constructor = SubType;\n```\n\n## ES6 中的继承\n\nES6 引入了 `class` 关键子，可以像其他语言中一样使用 `extends` 关键字来继承。虽然能够使用 `extends` 实现继承，但实际上内部还是基于原型。\n\n``` js\nclass SubType extends SuperType {\n  constructor() {\n    super();\n    // ...\n  }\n\n  // ...\n}\n```\n","frontmatter":{"title":"JavaScript 继承的那些事","date":"2017年1月24日","tags":["JavaScript","前端"]}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/something-about-javaScript-inherit/"}}}