{"componentChunkName":"component---src-templates-post-tsx","path":"/posts/posts/simple-use-of-the-php-curl-library/","result":{"data":{"markdownRemark":{"html":"<blockquote>\n<p>之前写 PHP 的爬虫的时候就有用到 cURl 扩展，然后前几天在写 <code>zhihu-php</code> 的时候也用到了这个，也觉得这个也是用得比较多的一个东西，所以就上网又学习了一下，就顺手把它写下来了。</p>\n</blockquote>\n<p>cURL 是一个功能强大的库，支持很多不同的协议、选项，能提供 URL 请求相关的各种细节信息。常用于网页、数据采集。</p>\n<h2>安装</h2>\n<p>可以通过 <code>phpinfo()</code> 来输出 PHP 的配置信息，搜索查看是否开启了 cURL 库。</p>\n<p><strong>windows</strong></p>\n<ul>\n<li>将 PHP 安装文件夹下的 <code>php_curl.dll</code>，<code>libeay32.dll</code>，<code>ssleay.dll</code> 复制到 <code>system32</code> 文件夹下。</li>\n<li>将 PHP.ini 中的 <code>extension=php_curl.dll</code> 前的 <code>;</code> 分号去掉。</li>\n<li>\n<p>重启服务器。</p>\n<!--more-->\n</li>\n</ul>\n<p><strong>linux</strong>\nUbuntu 上通过 <code>apt-get</code> 安装的 PHP 默认已经启用。若无，具体安装过程Google。</p>\n<h2>基本使用</h2>\n<p>通过 <code>curl_init()</code> 初始化一个 cURL 对象，然后通过 <code>curl_setopt()</code> 设置传输的选项，使用 <code>curl_exec()</code> 执行该 cURL 会话，最后通过 <code>curl_close()</code> 关闭这个会话</p>\n<p><strong>简单的抓取网页</strong></p>\n<pre><code class=\"language-php\">&#x3C;?php\n$url = 'http://www.ahonn.me';\n// 初始化一个 cURL 会话\n$ch  = curl_init($url);\n// 设置传输选项，这里设置的是返回的数据不直接输出\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n// 执行该会话，并保存到 $content\n$content = curl_exec($ch);\n// 关闭该会话\ncurl_close($ch);\n// 输出抓取的网页\necho $content;\n</code></pre>\n<p><strong>使用post方式</strong>\n通过 <code>get</code> 方式获取时，可以直接在 <code>$url</code> 中直接写入。而当需要使用 <code>post</code> 方式获取数据时，需要通过以下设置来开启 post 并设置 post 的数据。</p>\n<pre><code class=\"language-php\">// 开启 post\ncurl_setopt($ch, CURLOPT_POST, 1);\n// 设置 post 的数据\ncurl_setopt($ch, CURLOPT_POSTFIELDS, $data);\n</code></pre>\n<p>其中的 <code>$data</code> 即是需要 post 的数据。</p>\n<p><strong>设置header</strong>\n有些网页需要在请求中包含头信息，否则将抓取不到你需要的信息，那么可以通过下面的代码来设置：</p>\n<pre><code class=\"language-php\">// 头信息数组\n$header = array(\n        \"Host: www.ahonn.me\",\n        \"Accept: text/html, application/xhtml+xml, image/jxr, */*\",\n        \"User-Agent: Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/46.0.2490.80 Safari/537.36\"\n);\n// 设置header\ncurl_setopt($ch, CURLOPT_HTTPHEADER, $header);\n</code></pre>\n<p>设置头信息可以通过数组的形式，然后通过设置 <code>CURLOPT_HTTPHEADER</code> 来加入头信息。也可以单个去设置，例如</p>\n<ul>\n<li><code>CURLOPT_USERAGENT</code>：设置 User-Agent</li>\n<li><code>CURLOPT_REFERER</code>：设置 Referer</li>\n</ul>\n<p>等等</p>\n<p><strong>设置cookie</strong>\n有些网页需要登录后才可以抓取到，这时候就需要使用 cookie 来模拟登录。设置 cookie 可以在上面的 $header 数组中与头信息设置相同的方法来将 cookie 加入。也可以使用下面的 <code>curl_setpot</code> 选项来设置：</p>\n<pre><code class=\"language-php\">    // 设置 cookie，$cookie 是一个字符串\n    curl_setopt($ch, CURLOPT_COOKIE, $cookie);\n</code></pre>\n<p>也可以通过文件的形式将 cookie 写入：</p>\n<pre><code class=\"language-php\">    curl_setopt($ch, CURLOPT_COOKIEFILE, $cookiefile);\n</code></pre>\n<p><strong>禁用SSL验证</strong>\n有时候在抓取 Https 链接的时候以正常的方式去抓取会报错，此时需要在 cURL 会话中设置:</p>\n<pre><code class=\"language-php\">curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\ncurl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);\n</code></pre>\n<p>通过上面的设置，可以禁用SSL证书的验证。</p>\n<p>以上即是目前我已经简单使用过的 cURL 库的内容，cURL 库还可以实现多线程抓取，实现 IP 代理等。其他内容会在之后的使用中学习到。</p>","rawMarkdownBody":"\n> 之前写 PHP 的爬虫的时候就有用到 cURl 扩展，然后前几天在写 `zhihu-php` 的时候也用到了这个，也觉得这个也是用得比较多的一个东西，所以就上网又学习了一下，就顺手把它写下来了。\n\ncURL 是一个功能强大的库，支持很多不同的协议、选项，能提供 URL 请求相关的各种细节信息。常用于网页、数据采集。\n\n## 安装\n可以通过 `phpinfo()` 来输出 PHP 的配置信息，搜索查看是否开启了 cURL 库。\n\n**windows**\n- 将 PHP 安装文件夹下的 `php_curl.dll`，`libeay32.dll`，`ssleay.dll` 复制到 `system32` 文件夹下。\n- 将 PHP.ini 中的 `extension=php_curl.dll` 前的 `;` 分号去掉。\n- 重启服务器。\n<!--more-->\n\n**linux**\nUbuntu 上通过 `apt-get` 安装的 PHP 默认已经启用。若无，具体安装过程Google。\n\n## 基本使用\n通过 `curl_init()` 初始化一个 cURL 对象，然后通过 `curl_setopt()` 设置传输的选项，使用 `curl_exec()` 执行该 cURL 会话，最后通过 `curl_close()` 关闭这个会话\n\n**简单的抓取网页**\n``` php\n<?php\n$url = 'http://www.ahonn.me';\n// 初始化一个 cURL 会话\n$ch  = curl_init($url);\n// 设置传输选项，这里设置的是返回的数据不直接输出\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n// 执行该会话，并保存到 $content\n$content = curl_exec($ch);\n// 关闭该会话\ncurl_close($ch);\n// 输出抓取的网页\necho $content;\n```\n\n**使用post方式**\n通过 `get` 方式获取时，可以直接在 `$url` 中直接写入。而当需要使用 `post` 方式获取数据时，需要通过以下设置来开启 post 并设置 post 的数据。\n\n``` php\n// 开启 post\ncurl_setopt($ch, CURLOPT_POST, 1);\n// 设置 post 的数据\ncurl_setopt($ch, CURLOPT_POSTFIELDS, $data);\n```\n\n其中的 `$data` 即是需要 post 的数据。\n\n**设置header**\n有些网页需要在请求中包含头信息，否则将抓取不到你需要的信息，那么可以通过下面的代码来设置：\n``` php\n// 头信息数组\n$header = array(\n\t\t\"Host: www.ahonn.me\",\n\t\t\"Accept: text/html, application/xhtml+xml, image/jxr, */*\",\n\t\t\"User-Agent: Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/46.0.2490.80 Safari/537.36\"\n);\n// 设置header\ncurl_setopt($ch, CURLOPT_HTTPHEADER, $header);\n```\n\n设置头信息可以通过数组的形式，然后通过设置 `CURLOPT_HTTPHEADER` 来加入头信息。也可以单个去设置，例如\n- `CURLOPT_USERAGENT`：设置 User-Agent\n- `CURLOPT_REFERER`：设置 Referer\n\n等等\n\n**设置cookie**\n有些网页需要登录后才可以抓取到，这时候就需要使用 cookie 来模拟登录。设置 cookie 可以在上面的 $header 数组中与头信息设置相同的方法来将 cookie 加入。也可以使用下面的 `curl_setpot` 选项来设置：\n``` php\n\t// 设置 cookie，$cookie 是一个字符串\n\tcurl_setopt($ch, CURLOPT_COOKIE, $cookie);\n```\n\n也可以通过文件的形式将 cookie 写入：\n``` php\n\tcurl_setopt($ch, CURLOPT_COOKIEFILE, $cookiefile);\n```\n\n**禁用SSL验证**\n有时候在抓取 Https 链接的时候以正常的方式去抓取会报错，此时需要在 cURL 会话中设置:\n``` php\ncurl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\ncurl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);\n```\n通过上面的设置，可以禁用SSL证书的验证。\n\n以上即是目前我已经简单使用过的 cURL 库的内容，cURL 库还可以实现多线程抓取，实现 IP 代理等。其他内容会在之后的使用中学习到。\n","frontmatter":{"title":"PHP cURL 库的简单使用","date":"2015年12月19日","tags":["PHP"]}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/simple-use-of-the-php-curl-library/"}}}