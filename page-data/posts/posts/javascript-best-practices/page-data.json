{"componentChunkName":"component---src-templates-post-tsx","path":"/posts/posts/javascript-best-practices/","result":{"data":{"markdownRemark":{"html":"<blockquote>\n<p>翻译自：<a href=\"https://www.codementor.io/javascript/tutorial/javascript-best-practices\">JavaScript Best Practices: Tips &#x26; Tricks to Level Up Your Code</a>\n没有严格的按照原文翻译，删减修改了部分内容。</p>\n</blockquote>\n<p>在这个教程中，会列出一些重要的 JavaScript 的最佳实践，学习这些并不会很困难。</p>\n<h2>避免污染全局作用域</h2>\n<p>声明变量是很有趣的，有时候你会在你不知情的情况下声明了全局变量。在现在的浏览器中，全局变量将会存储在 <code>window</code> 变量中。在全局作用域中的变量可能在不经意间被覆盖。</p>\n<!--more-->\n<p>假设你现在有一个 HTML 文件，其中包括一个 <code>&#x3C;script></code> 标签，包含如下内容：</p>\n<pre><code class=\"language-js\">var foo = 42;\nconsole.log(foo);\n</code></pre>\n<p>显然这会在控制台中输出 42。但是，由于这些代码不是在函数中执行的，而是处于全局作用域中，因此 foo 将会被附加到 <code>window</code> 上。也就是说 <code>window.foo</code> 的值同样也是 42。</p>\n<p>这样做是危险的，因为这样会覆盖现有的全局变量。</p>\n<pre><code class=\"language-js\">function print () {\n  // do something\n}\nprint();\n</code></pre>\n<p>当执行 <code>window.print</code> 或者 <code>print</code> 时，因为我们重写了 <code>print</code> 函数，所以原来的打印函数不起作用了，也就不会弹出打印框了。</p>\n<p>解决办法很简单：使用立即执行函数（IIFE）。</p>\n<pre><code class=\"language-js\">// Declare an anonymous function\n(function () {\n   var foo = 42;\n   console.log(window.foo);\n   // → undefined\n   console.log(foo);\n   // → 42\n})();\n//^ and call it immediately\n</code></pre>\n<p>或者，可以将 <code>window</code> 等全局变量作为参数传递给函数（这可能提高性能）：</p>\n<pre><code class=\"language-js\">(function (global, doc) {\n  global.setTimeout(function () {\n     doc.body.innerHTML = \"Hello!\";\n  }, 1000);\n})(window, document);\n</code></pre>\n<p>所以，我们可以使用上述的两种方式，避免不知情的情况下创建全局变量。</p>\n<h2>使用 \"use strict\"</h2>\n<p>严格使用 <code>\"use strict\"</code>，这只不过是在你的代码中添加字符串，但它的作用非常大。</p>\n<p>比如：</p>\n<pre><code class=\"language-js\">// This is bad, since you do create a global without having anyone to tell you\n(function () {\n   a = 42;\n   console.log(a);\n   // → 42\n})();\nconsole.log(a);\n// → 42\n</code></pre>\n<p>上述代码，如果使用 <code>\"use strict\"</code>，你将会得到一些错误信息：</p>\n<pre><code class=\"language-js\">(function () {\n   \"use strict\";\n   a = 42;\n   // Error: Uncaught ReferenceError: a is not defined\n})();\n</code></pre>\n<p>你可能会很奇怪，为什么不把 <code>\"use strict\"</code> 放到函数之外？实际上你可以将它放到函数外，但是这样的话他就在全局环境中应用了。这有可能影响来自其他库的代码。</p>\n<h2>使用 ===</h2>\n<p>如果你比较 a 和 b 时使用 <code>==</code>，在 JavaScript 中你会发现这是一种奇怪的方式。如果你有一个字符串和一个数字，像是下面这样。他们将是相等的，即返回 true：</p>\n<pre><code class=\"language-js\">\"42\" == 42\n// → true\n</code></pre>\n<p>这是一种不严格的比较，在进行数据验证时，最好使用 <code>===</code>。这将会严格的比较 a 与 b 是否相等：</p>\n<pre><code class=\"language-js\">\"42\" === 42\n// → false\n</code></pre>\n<h2>使用神奇的 &#x26;&#x26; 和 ||</h2>\n<p>根据的你的需要，可以使用逻辑运算符使得代码更加简短。例如：</p>\n<pre><code class=\"language-js\">\"\" || \"foo\"\n// → \"foo\"\n\nundefined || 42\n// → 42\n\n// Note that if you want to handle 0 there, you need\n// to check if a number was provided:\nvar a = 0;\na || 42\n// → 42\n\n// This is a ternary operator—works like an inline if-else statement\nvar b = typeof a === \"number\" ? a : 42;\n// → 0\n</code></pre>\n<p>可以这样简单的实现 if 的检查：</p>\n<pre><code class=\"language-js\">expr &#x26;&#x26; doSomething();\n\n// Instead of:\nif (expr) {\n   doSomething();\n}\n</code></pre>\n<p>如果你需要返回结果，你还可以这样做：</p>\n<pre><code class=\"language-js\">function doSomething () {\n   return { foo: \"bar\" };\n}\nvar expr = true;\nvar res = expr &#x26;&#x26; doSomething();\nres &#x26;&#x26; console.log(res);\n// → { foo: \"bar\" }\n</code></pre>\n<p>这里你可以不同意我的观点，但这是比较理想的情况。如果你不想要这样丑化你的代码，使得代码隐晦。这是那些 JavaScript 压缩工具会做的事情，你可以使用它们。</p>\n<p>虽然代码比较短，但是这依然是具有可读性的。</p>\n<h2>转换类型</h2>\n<p>有很多种方式去进行类型转换，要怎么转换取决于你。这里有一些常用的方法：</p>\n<pre><code class=\"language-js\">// From anything to a number\n\nvar foo = \"42\";\nvar myNumber = +foo; // shortcut for Number(foo)\n// → 42\n\n// Tip: you can convert it directly into a negative number\nvar negativeFoo = -foo; // or -Number(foo)\n// → -42\n\n// From object to array\n// Tip: `arguments` is an object and in general you want to use it as array\nvar args = { 0: \"foo\", 1: \"bar\", length: 2 };\nArray.prototype.slice.call(args)\n// → [ 'foo', 'bar' ]\n\n// Anything to boolean\n/// Non non p is a boolean p\nvar t = 1;\nvar f = 0;\n!!t\n// → true\n!!f\n// → false\n\n/// And non-p is a boolean non-p\n!t\n// → false\n!f\n// → true\n\n// Anything to string\nvar foo = 42;\n\"\" + foo // shortcut for String(foo)\n// → \"42\"\n\nfoo = { hello: \"world\" };\nJSON.stringify(foo);\n// → '{ \"hello\":\"world\" }'\n\nJSON.stringify(foo, null, 4); // beautify the things\n// →\n// '{\n//    \"hello\": \"world\"\n// }'\n\n// Note you cannot JSON.stringify circular structures\nJSON.stringify(window);\n// ⚠ TypeError: JSON.stringify cannot serialize cyclic structures.\n</code></pre>\n<h2>代码风格</h2>\n<p>对新项目，保持项目中的所有代码的风格相同。对于现有项目，使用现有项目的代码风格，除非你真的想去改变它。</p>\n<p><strong>制定你的代码风格，并始终遵循它</strong></p>\n<p>这里还有一些推荐的现有代码风格：</p>\n<ul>\n<li><a href=\"https://google.github.io/styleguide/javascriptguide.xml\">Google JavaScript Style Guide</a></li>\n<li><a href=\"https://github.com/airbnb/javascript\">airbnb/javascript</a></li>\n</ul>","rawMarkdownBody":"\n> 翻译自：[JavaScript Best Practices: Tips & Tricks to Level Up Your Code](https://www.codementor.io/javascript/tutorial/javascript-best-practices)\n> 没有严格的按照原文翻译，删减修改了部分内容。\n\n在这个教程中，会列出一些重要的 JavaScript 的最佳实践，学习这些并不会很困难。\n\n## 避免污染全局作用域\n声明变量是很有趣的，有时候你会在你不知情的情况下声明了全局变量。在现在的浏览器中，全局变量将会存储在 `window` 变量中。在全局作用域中的变量可能在不经意间被覆盖。\n\n<!--more-->\n\n假设你现在有一个 HTML 文件，其中包括一个 `<script>` 标签，包含如下内容：\n\n``` js\nvar foo = 42;\nconsole.log(foo);\n```\n\n显然这会在控制台中输出 42。但是，由于这些代码不是在函数中执行的，而是处于全局作用域中，因此 foo 将会被附加到 `window` 上。也就是说 `window.foo` 的值同样也是 42。\n\n这样做是危险的，因为这样会覆盖现有的全局变量。\n\n``` js\nfunction print () {\n  // do something\n}\nprint();\n```\n\n当执行 `window.print` 或者 `print` 时，因为我们重写了 `print` 函数，所以原来的打印函数不起作用了，也就不会弹出打印框了。\n\n解决办法很简单：使用立即执行函数（IIFE）。\n\n``` js\n// Declare an anonymous function\n(function () {\n   var foo = 42;\n   console.log(window.foo);\n   // → undefined\n   console.log(foo);\n   // → 42\n})();\n//^ and call it immediately\n```\n\n或者，可以将 `window` 等全局变量作为参数传递给函数（这可能提高性能）：\n\n``` js\n(function (global, doc) {\n  global.setTimeout(function () {\n     doc.body.innerHTML = \"Hello!\";\n  }, 1000);\n})(window, document);\n```\n\n所以，我们可以使用上述的两种方式，避免不知情的情况下创建全局变量。\n\n## 使用 \"use strict\"\n严格使用 `\"use strict\"`，这只不过是在你的代码中添加字符串，但它的作用非常大。\n\n比如：\n\n``` js\n// This is bad, since you do create a global without having anyone to tell you\n(function () {\n   a = 42;\n   console.log(a);\n   // → 42\n})();\nconsole.log(a);\n// → 42\n```\n\n上述代码，如果使用 `\"use strict\"`，你将会得到一些错误信息：\n\n``` js\n(function () {\n   \"use strict\";\n   a = 42;\n   // Error: Uncaught ReferenceError: a is not defined\n})();\n```\n\n你可能会很奇怪，为什么不把 `\"use strict\"` 放到函数之外？实际上你可以将它放到函数外，但是这样的话他就在全局环境中应用了。这有可能影响来自其他库的代码。\n\n## 使用 ===\n如果你比较 a 和 b 时使用 `==`，在 JavaScript 中你会发现这是一种奇怪的方式。如果你有一个字符串和一个数字，像是下面这样。他们将是相等的，即返回 true：\n\n``` js\n\"42\" == 42\n// → true\n```\n\n这是一种不严格的比较，在进行数据验证时，最好使用 `===`。这将会严格的比较 a 与 b 是否相等：\n\n``` js\n\"42\" === 42\n// → false\n```\n\n## 使用神奇的 && 和 ||\n根据的你的需要，可以使用逻辑运算符使得代码更加简短。例如：\n\n``` js\n\"\" || \"foo\"\n// → \"foo\"\n\nundefined || 42\n// → 42\n\n// Note that if you want to handle 0 there, you need\n// to check if a number was provided:\nvar a = 0;\na || 42\n// → 42\n\n// This is a ternary operator—works like an inline if-else statement\nvar b = typeof a === \"number\" ? a : 42;\n// → 0\n```\n\n可以这样简单的实现 if 的检查：\n\n``` js\nexpr && doSomething();\n\n// Instead of:\nif (expr) {\n   doSomething();\n}\n```\n\n如果你需要返回结果，你还可以这样做：\n\n``` js\nfunction doSomething () {\n   return { foo: \"bar\" };\n}\nvar expr = true;\nvar res = expr && doSomething();\nres && console.log(res);\n// → { foo: \"bar\" }\n```\n\n这里你可以不同意我的观点，但这是比较理想的情况。如果你不想要这样丑化你的代码，使得代码隐晦。这是那些 JavaScript 压缩工具会做的事情，你可以使用它们。\n\n虽然代码比较短，但是这依然是具有可读性的。\n\n## 转换类型\n有很多种方式去进行类型转换，要怎么转换取决于你。这里有一些常用的方法：\n\n``` js\n// From anything to a number\n\nvar foo = \"42\";\nvar myNumber = +foo; // shortcut for Number(foo)\n// → 42\n\n// Tip: you can convert it directly into a negative number\nvar negativeFoo = -foo; // or -Number(foo)\n// → -42\n\n// From object to array\n// Tip: `arguments` is an object and in general you want to use it as array\nvar args = { 0: \"foo\", 1: \"bar\", length: 2 };\nArray.prototype.slice.call(args)\n// → [ 'foo', 'bar' ]\n\n// Anything to boolean\n/// Non non p is a boolean p\nvar t = 1;\nvar f = 0;\n!!t\n// → true\n!!f\n// → false\n\n/// And non-p is a boolean non-p\n!t\n// → false\n!f\n// → true\n\n// Anything to string\nvar foo = 42;\n\"\" + foo // shortcut for String(foo)\n// → \"42\"\n\nfoo = { hello: \"world\" };\nJSON.stringify(foo);\n// → '{ \"hello\":\"world\" }'\n\nJSON.stringify(foo, null, 4); // beautify the things\n// →\n// '{\n//    \"hello\": \"world\"\n// }'\n\n// Note you cannot JSON.stringify circular structures\nJSON.stringify(window);\n// ⚠ TypeError: JSON.stringify cannot serialize cyclic structures.\n```\n\n## 代码风格\n对新项目，保持项目中的所有代码的风格相同。对于现有项目，使用现有项目的代码风格，除非你真的想去改变它。\n\n**制定你的代码风格，并始终遵循它**\n\n这里还有一些推荐的现有代码风格：\n\n- [Google JavaScript Style Guide](https://google.github.io/styleguide/javascriptguide.xml)\n- [airbnb/javascript](https://github.com/airbnb/javascript)\n\n\n","frontmatter":{"title":"JavaScript 最佳实践","date":"2016年8月31日","tags":["JavaScript","前端"]}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/javascript-best-practices/"}}}