{"componentChunkName":"component---src-templates-post-tsx","path":"/posts/posts/some-ways-of-javascript-create-object/","result":{"data":{"markdownRemark":{"html":"<h2>工厂模式</h2>\n<p>在函数中创建 Object 对象，并为对象添加属性。函数返回添加属性之后的对象。</p>\n<pre><code class=\"language-js\">function createPerson(name, age) {\n  var o = new Object()\n  o.name = name\n  o.age = age\n  o.sayName = function () {\n    console.log(this.name)\n  }\n  return o\n}\n\nvar p = createPerson(\"ahonn\", 21)\n</code></pre>\n<!--more-->\n<p>但工厂模式产生的对象依旧为 Object 类型，只是在对象上添加了一些属性。</p>\n<blockquote>\n<p>工厂模式虽然解决了创建多个相似对象的问题，但却没有解决对象识别的问题（即怎样知道一个对象的类型）</p>\n</blockquote>\n<h2>构造函数模式</h2>\n<p>由于工厂模式创建的对象没有解决对象识别的问题，出现了另外一种新模式：构造函数模式。</p>\n<pre><code class=\"language-js\">function Person(name, age) {\n  this.name = name\n  this.age = age\n  this.sayName = function () {\n    console.log(this.name)\n  }\n}\n\nvar p = new Person(\"ahonn\", 21)\n</code></pre>\n<p>这里使用了 <code>new</code> 操作符，即是将 Person 函数通过构造函数的方式去调用来创建对象。</p>\n<p>构造函数会进行下面几个步骤：</p>\n<ul>\n<li>创建一个新对象</li>\n<li>将构造函数的 this 指向新对象</li>\n<li>通过 this 给对象添加属性</li>\n<li>返回新对象</li>\n</ul>\n<p>使用构造函数模式创建的对象可以通过 <code>constructor</code> 属性查看对象的类型。</p>\n<pre><code class=\"language-js\">console.log(p.constructor) // Person\n</code></pre>\n<h3>构造函数也是普通函数</h3>\n<p>构造函数与普通的函数无异，也可以直接调用构造函数。但此时就不会创建新对象，函数中的 this 指向的是函数当前所在的作用域。</p>\n<pre><code class=\"language-js\">Person(\"ahonn\", 21)\nthis.sayName() // ahonn\n</code></pre>\n<h2>原型模式</h2>\n<p>通过构造函数模式创建的对象有一个问题，就是创建的对象各自拥有自己的方法，而实际上这些方法都是相同的。通过原型模式即可以将共同的属性方法放在 prototype 上。</p>\n<pre><code class=\"language-js\">function Person() {}\n\nPerson.prototype.name = \"ahonn\"\nPerson.prototype.age = 21\nPerson.prototype.sayName = function () {\n  console.log(this.name)\n}\n\nvar p1 = new Person()\np1.sayName() // \"ahonn\"\n\nvar p2 = new Person()\np2.sayName() // \"ahonn\"\n</code></pre>\n<p>对象在 prototype 上的属性是共享的，即修改一个对象的某个属性，另一个对象对于的属性值也会改变。</p>\n<pre><code class=\"language-js\">p1.name = \"test\"\np1.sayName() // test\n\np2.sayName() // test\n</code></pre>\n<h2>构造函数与原型模式</h2>\n<p>使用原型模式创建的对象共享 prototype 上的属性，那么当有些属性不想要对象之间共享的时候，就可以结合构造函数模式与原型模式来使用。这也是最常用的创建对象的方式。</p>\n<pre><code class=\"language-js\">function Person(name, age) {\n  this.name = name\n  this.age = age\n}\n\nPerson.prototype.sayName = function () {\n  console.log(this.name)\n}\n\nvar  p1 = new Person(\"ahonn\", 21)\np1.sayName() // \"ahonn\"\n\nvar p2 = new Person(\"test\", 12)\np2.sayName() // \"test\"\n</code></pre>\n<h2>ES6 类</h2>\n<p>在 ES6 中有类似于 Java 创建对象的方式，即通过类来创建对象。ES6 中提供了 <code>class</code> 关键字，来声明一个类型，并如上面构造函数模式的方式一样使用 <code>new</code> 来声明对象。虽然可以使用类似 Java 中的 <code>class</code> 来声明，但实际上只是给构造函数与原型模式加上了语法糖，使得代码看起来更加易读。</p>\n<p>还是 Person 类的例子</p>\n<pre><code class=\"language-js\">class Person {\n  constructor(name, age) {\n    this.name = name\n    this.age = age\n  }\n\n  sayName() {\n    console.log(this.name)\n  }\n}\n\nvar p = new Person(\"ahonn\", 21)\np.sayName() // \"ahonn\"\n</code></pre>\n<p>通过 <code>class</code> 关键字声明 Person 类，<code>constructor</code> 函数即为 Person 类的构造函数，类属性的初始化也在其中。需要在各个对象中共享的方法也写在 <code>class</code> 中，避免了原来定义在 <code>prototype</code> 上时的撕裂感。</p>","rawMarkdownBody":"\n## 工厂模式\n在函数中创建 Object 对象，并为对象添加属性。函数返回添加属性之后的对象。\n\n``` js\nfunction createPerson(name, age) {\n  var o = new Object()\n  o.name = name\n  o.age = age\n  o.sayName = function () {\n    console.log(this.name)\n  }\n  return o\n}\n\nvar p = createPerson(\"ahonn\", 21)\n```\n\n<!--more-->\n\n但工厂模式产生的对象依旧为 Object 类型，只是在对象上添加了一些属性。\n\n> 工厂模式虽然解决了创建多个相似对象的问题，但却没有解决对象识别的问题（即怎样知道一个对象的类型）\n\n## 构造函数模式\n由于工厂模式创建的对象没有解决对象识别的问题，出现了另外一种新模式：构造函数模式。\n\n``` js\nfunction Person(name, age) {\n  this.name = name\n  this.age = age\n  this.sayName = function () {\n    console.log(this.name)\n  }\n}\n\nvar p = new Person(\"ahonn\", 21)\n```\n\n这里使用了 `new` 操作符，即是将 Person 函数通过构造函数的方式去调用来创建对象。\n\n构造函数会进行下面几个步骤：\n- 创建一个新对象\n- 将构造函数的 this 指向新对象\n- 通过 this 给对象添加属性\n- 返回新对象\n\n使用构造函数模式创建的对象可以通过 `constructor` 属性查看对象的类型。\n\n``` js\nconsole.log(p.constructor) // Person\n```\n\n### 构造函数也是普通函数\n构造函数与普通的函数无异，也可以直接调用构造函数。但此时就不会创建新对象，函数中的 this 指向的是函数当前所在的作用域。\n\n``` js\nPerson(\"ahonn\", 21)\nthis.sayName() // ahonn\n```\n\n## 原型模式\n通过构造函数模式创建的对象有一个问题，就是创建的对象各自拥有自己的方法，而实际上这些方法都是相同的。通过原型模式即可以将共同的属性方法放在 prototype 上。\n\n``` js\nfunction Person() {}\n\nPerson.prototype.name = \"ahonn\"\nPerson.prototype.age = 21\nPerson.prototype.sayName = function () {\n  console.log(this.name)\n}\n\nvar p1 = new Person()\np1.sayName() // \"ahonn\"\n\nvar p2 = new Person()\np2.sayName() // \"ahonn\"\n```\n\n对象在 prototype 上的属性是共享的，即修改一个对象的某个属性，另一个对象对于的属性值也会改变。\n\n``` js\np1.name = \"test\"\np1.sayName() // test\n\np2.sayName() // test\n```\n\n## 构造函数与原型模式\n使用原型模式创建的对象共享 prototype 上的属性，那么当有些属性不想要对象之间共享的时候，就可以结合构造函数模式与原型模式来使用。这也是最常用的创建对象的方式。\n\n``` js\nfunction Person(name, age) {\n  this.name = name\n  this.age = age\n}\n\nPerson.prototype.sayName = function () {\n  console.log(this.name)\n}\n\nvar  p1 = new Person(\"ahonn\", 21)\np1.sayName() // \"ahonn\"\n\nvar p2 = new Person(\"test\", 12)\np2.sayName() // \"test\"\n```\n\n## ES6 类\n在 ES6 中有类似于 Java 创建对象的方式，即通过类来创建对象。ES6 中提供了 `class` 关键字，来声明一个类型，并如上面构造函数模式的方式一样使用 `new` 来声明对象。虽然可以使用类似 Java 中的 `class` 来声明，但实际上只是给构造函数与原型模式加上了语法糖，使得代码看起来更加易读。\n\n还是 Person 类的例子\n``` js\nclass Person {\n  constructor(name, age) {\n    this.name = name\n    this.age = age\n  }\n\n  sayName() {\n    console.log(this.name)\n  }\n}\n\nvar p = new Person(\"ahonn\", 21)\np.sayName() // \"ahonn\"\n```\n\n通过 `class` 关键字声明 Person 类，`constructor` 函数即为 Person 类的构造函数，类属性的初始化也在其中。需要在各个对象中共享的方法也写在 `class` 中，避免了原来定义在 `prototype` 上时的撕裂感。\n","frontmatter":{"title":"JavaScript 创建对象的一些姿势","date":"2016年11月30日","tags":["JavaScript","前端"]}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/some-ways-of-javascript-create-object/"}}}