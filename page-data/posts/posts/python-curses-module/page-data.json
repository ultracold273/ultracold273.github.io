{"componentChunkName":"component---src-templates-post-tsx","path":"/posts/posts/python-curses-module/","result":{"data":{"markdownRemark":{"html":"<p>Python 中的 curses 模块封装了 C 语言的 curses。curses 是一个能够提供基于文本终端窗口功能的动态库。它可以创建和管理一个窗口，使用8中不同的颜色，提供鼠标以及键盘支持。与 Tkinter 不同的是 curses 是基于终端的。</p>\n<p><strong>curses 支持 Unix/Linux 系统，目前不支持 Windows</strong></p>\n<!--more-->\n<h2>基本语法</h2>\n<ul>\n<li><code>initscr()</code>\n初始化 curses, 在任何代码执行钱都需要先初始化 curses。</li>\n<li><code>noecho()</code>\n关闭屏幕回显，即读取字符仅在适当的环境下输出。相对应的是 <code>echo()</code>。</li>\n<li><code>cbreak()</code>\n程序立即反应，即不需要按回车。相对应的是 <code>nocbreak()</code>。</li>\n<li><code>keypad(bool)</code>\n键盘模式，即读取键盘输出。<code>keypad(1)</code> 为开启，<code>keypad(0)</code> 为关闭。</li>\n<li><code>endwin()</code>\n恢复默认设置，即回到终端之前的状态。</li>\n<li><code>newwin(height, width, begin_y, begin_x)</code>\n在原有程序中创建新窗口，类似与分屏。</li>\n<li>\n<p><code>addscr(y, x, str, attr)</code>\n显示文本，若没有坐标，字符将显示在上一次操作完的位置；若没有属性，字符将使用默认的属性显示。</p>\n<p><strong>属性：</strong>可使用 <code>color_pair(int)</code> 方法获取一对颜色。使用 <code>init_pair(n, f, b)</code> 修改颜色对 n，使用 f 为前景色，使用 b 为背景色。</p>\n<p>curses 内置了8种基本颜色：<code>COLOR_RED</code>, <code>COLOR_BLACK</code>, <code>COLOR_GREEN</code>, <code>COLOR_YELLOW</code>, <code>COLOR_BULE</code>, <code>COLOR_MAGENTA</code>, <code>COLOR_CYAN</code>, <code>COLOR_WHITE</code>。使用颜色前需要调用 <code>start_color()</code>。</p>\n</li>\n<li>getch()\n获取输入一个字符串，返回一个 0~255 之间的整数，表示字符的 ASCII 值。</li>\n<li>refresh()\n刷新窗口，变更窗口后需要调用</li>\n</ul>\n<h2>基本使用</h2>\n<pre><code class=\"language-python\">import curses\n\n# 初始化 curses\nscreen = curses.initscr()\n# 开启键盘模式\nscreen.keypad(1)\n# 关闭屏幕回显\ncurses.noecho()\n\n# 开启颜色设置，并设置颜色对\ncurses.start_color()\ncurses.init_pair(1, curses.COLOR_CYAN, curses.COLOR_RED)\ncurses.init_pair(2, curses.COLOR_BLUE, curses.COLOR_WHITE)\n\n# 显示文本\nscreen.addstr(12, 25, \"Hello, Ahonn!\")\nwhile True:\n    # 读取键盘输入\n    key = screen.getch()\n\n    # 当输入 c 时，显示 you input 'c', 使用颜色对 1\n    if key == ord('c'):\n        screen.addstr(12, 25, \"you input 'c' \", curses.color_pair(1))\n    # 当输入 b 时，显示 you input 'b'，使用颜色对 2\n    elif key == ord('b'):\n        screen.addstr(12, 25, \"you input 'b' \", curses.color_pair(2))\n    # 当输入 q 时退出循环\n    elif key == ord('q'):\n        break\n# 刷新窗口\nscreen.refresh()\n# 退出到终端之前的状态\ncurses.endwin()\n</code></pre>","rawMarkdownBody":"\nPython 中的 curses 模块封装了 C 语言的 curses。curses 是一个能够提供基于文本终端窗口功能的动态库。它可以创建和管理一个窗口，使用8中不同的颜色，提供鼠标以及键盘支持。与 Tkinter 不同的是 curses 是基于终端的。\n\n**curses 支持 Unix/Linux 系统，目前不支持 Windows**\n<!--more-->\n\n## 基本语法\n- `initscr()`\n\t初始化 curses, 在任何代码执行钱都需要先初始化 curses。\n- `noecho()`\n\t关闭屏幕回显，即读取字符仅在适当的环境下输出。相对应的是 `echo()`。\n- `cbreak()`\n\t程序立即反应，即不需要按回车。相对应的是 `nocbreak()`。\n- `keypad(bool)`\n\t键盘模式，即读取键盘输出。`keypad(1)` 为开启，`keypad(0)` 为关闭。\n- `endwin()`\n\t恢复默认设置，即回到终端之前的状态。\n- `newwin(height, width, begin_y, begin_x)`\n\t在原有程序中创建新窗口，类似与分屏。\n- `addscr(y, x, str, attr)`\n\t显示文本，若没有坐标，字符将显示在上一次操作完的位置；若没有属性，字符将使用默认的属性显示。\n\n\t**属性：**可使用 `color_pair(int)` 方法获取一对颜色。使用 `init_pair(n, f, b)` 修改颜色对 n，使用 f 为前景色，使用 b 为背景色。\n\n\tcurses 内置了8种基本颜色：`COLOR_RED`, `COLOR_BLACK`, `COLOR_GREEN`, `COLOR_YELLOW`, `COLOR_BULE`, `COLOR_MAGENTA`, `COLOR_CYAN`, `COLOR_WHITE`。使用颜色前需要调用 `start_color()`。\n- getch()\n\t获取输入一个字符串，返回一个 0~255 之间的整数，表示字符的 ASCII 值。\n- refresh()\n\t刷新窗口，变更窗口后需要调用\n\n## 基本使用\n``` python\nimport curses\n\n# 初始化 curses\nscreen = curses.initscr()\n# 开启键盘模式\nscreen.keypad(1)\n# 关闭屏幕回显\ncurses.noecho()\n\n# 开启颜色设置，并设置颜色对\ncurses.start_color()\ncurses.init_pair(1, curses.COLOR_CYAN, curses.COLOR_RED)\ncurses.init_pair(2, curses.COLOR_BLUE, curses.COLOR_WHITE)\n\n# 显示文本\nscreen.addstr(12, 25, \"Hello, Ahonn!\")\nwhile True:\n\t# 读取键盘输入\n\tkey = screen.getch()\n\n\t# 当输入 c 时，显示 you input 'c', 使用颜色对 1\n\tif key == ord('c'):\n\t\tscreen.addstr(12, 25, \"you input 'c' \", curses.color_pair(1))\n\t# 当输入 b 时，显示 you input 'b'，使用颜色对 2\n\telif key == ord('b'):\n\t\tscreen.addstr(12, 25, \"you input 'b' \", curses.color_pair(2))\n\t# 当输入 q 时退出循环\n\telif key == ord('q'):\n\t\tbreak\n# 刷新窗口\nscreen.refresh()\n# 退出到终端之前的状态\ncurses.endwin()\n```\n","frontmatter":{"title":"Python curses 模块","date":"2016年1月23日","tags":["Python"]}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/python-curses-module/"}}}