{"componentChunkName":"component---src-templates-post-tsx","path":"/posts/posts/the-memo-of-javascript-regexp/","result":{"data":{"markdownRemark":{"html":"<p>JavaScript 创建正则表达式有两种方式：</p>\n<ul>\n<li>使用正则表达式字面量：<code>var re = /abc/;</code></li>\n<li>调用 RegExp 对象的构造函数：<code>var re = new RegExp(\"abc\");</code></li>\n</ul>\n<h2>什么时候使用构造函数？</h2>\n<p>当正则表达式的模式会变发生改变，或者需要从其他地方得到时（例如用户输入），适合使用构造函数的方式。</p>\n<!--more-->\n<h2>匹配字符表</h2>\n<ul>\n<li><code>\\</code>：将其后的特殊字符转义为字面量</li>\n<li><code>^</code>：匹配输入的开始</li>\n<li><code>$</code>：匹配输入的结束</li>\n<li><code>*</code>：匹配前一个表达式0次或者多次，等价于 {0,}</li>\n<li><code>+</code>：匹配前一个表达式1次或多次，等价于 {1,}</li>\n<li><code>?</code>：匹配前一个表达式0次或者1次，等价于 {0,1}</li>\n<li><code>.</code>：匹配除了换行符（\\n）之外的任何单个字符</li>\n<li><code>(x)</code>：匹配 ‘x’ 并记住匹配项</li>\n<li><code>(?:x)</code>：匹配 ‘x’ 但不记住匹配项</li>\n<li><code>x(?=y)</code>: 匹配 ‘x’ 并且 ‘x’ 后面跟着 ‘y’，也叫作正向肯定查找</li>\n<li><code>x(?!y)</code>：匹配 ‘x’ 并且 ‘x’ 后面不跟着 ‘y’，也叫作正向否定查找</li>\n<li><code>x | y</code>：匹配 ‘x’ 或者 'y'</li>\n<li><code>{n}</code>：匹配前一个字符 n 次</li>\n<li><code>{n, m}</code>：匹配前一个字符最少 n 次</li>\n<li><code>[xyz]</code>：匹配括号中的任意一个字符，可以使用 <code>-</code> 指定范围</li>\n<li><code>[^xyz]</code>: 匹配任何不在括号中的字符</li>\n<li><code>\\b</code>：匹配一个词的边界</li>\n<li><code>\\B</code>：匹配非单词边界</li>\n<li><code>\\d</code>：匹配一个数字</li>\n<li><code>\\D</code>：匹配一个非数字字符，等价于 <sup id=\"fnref-0-9\"><a href=\"#fn-0-9\" class=\"footnote-ref\">0-9</a></sup></li>\n<li><code>\\f</code>：匹配一个换页符</li>\n<li><code>\\n</code>：匹配一个换行符</li>\n<li><code>\\r</code>: 匹配一个回车符</li>\n<li><code>\\s</code>：匹配一个空白字符</li>\n<li><code>\\S</code>：匹配一个非空白字符</li>\n<li><code>\\t</code>：匹配一个水平制表符</li>\n<li><code>\\v</code>: 匹配一个垂直制表符</li>\n<li><code>\\w</code>：匹配一个单字字符，等价于 [A-Za-z0-9_]</li>\n<li><code>\\W</code>：匹配一个非单字字符，等价于 <sup id=\"fnref-a-za-z0-9_\"><a href=\"#fn-a-za-z0-9_\" class=\"footnote-ref\">a-za-z0-9_</a></sup></li>\n</ul>","rawMarkdownBody":"\nJavaScript 创建正则表达式有两种方式：\n- 使用正则表达式字面量：`var re = /abc/;`\n- 调用 RegExp 对象的构造函数：`var re = new RegExp(\"abc\");`\n\n## 什么时候使用构造函数？\n当正则表达式的模式会变发生改变，或者需要从其他地方得到时（例如用户输入），适合使用构造函数的方式。\n\n<!--more-->\n\n## 匹配字符表\n- `\\`：将其后的特殊字符转义为字面量\n- `^`：匹配输入的开始\n- `$`：匹配输入的结束\n- `*`：匹配前一个表达式0次或者多次，等价于 {0,}\n- `+`：匹配前一个表达式1次或多次，等价于 {1,}\n- `?`：匹配前一个表达式0次或者1次，等价于 {0,1}\n- `.`：匹配除了换行符（\\n）之外的任何单个字符\n- `(x)`：匹配 ‘x’ 并记住匹配项\n- `(?:x)`：匹配 ‘x’ 但不记住匹配项\n- `x(?=y)`: 匹配 ‘x’ 并且 ‘x’ 后面跟着 ‘y’，也叫作正向肯定查找\n- `x(?!y)`：匹配 ‘x’ 并且 ‘x’ 后面不跟着 ‘y’，也叫作正向否定查找\n- `x | y`：匹配 ‘x’ 或者 'y'\n- `{n}`：匹配前一个字符 n 次\n- `{n, m}`：匹配前一个字符最少 n 次\n- `[xyz]`：匹配括号中的任意一个字符，可以使用 `-` 指定范围\n- `[^xyz]`: 匹配任何不在括号中的字符\n- `\\b`：匹配一个词的边界\n- `\\B`：匹配非单词边界\n- `\\d`：匹配一个数字\n- `\\D`：匹配一个非数字字符，等价于 [^0-9]\n- `\\f`：匹配一个换页符\n- `\\n`：匹配一个换行符\n- `\\r`: 匹配一个回车符\n- `\\s`：匹配一个空白字符\n- `\\S`：匹配一个非空白字符\n- `\\t`：匹配一个水平制表符\n- `\\v`: 匹配一个垂直制表符\n- `\\w`：匹配一个单字字符，等价于 [A-Za-z0-9_]\n- `\\W`：匹配一个非单字字符，等价于 [^A-Za-z0-9_]\n\n\n","frontmatter":{"title":"正则表达式备忘录","date":"2016年9月13日","tags":["JavaScript","前端","RegExp"]}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/the-memo-of-javascript-regexp/"}}}