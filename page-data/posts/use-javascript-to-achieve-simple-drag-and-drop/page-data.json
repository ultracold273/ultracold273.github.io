{"componentChunkName":"component---src-templates-post-tsx","path":"/posts/use-javascript-to-achieve-simple-drag-and-drop/","result":{"data":{"markdownRemark":{"html":"<h2>步骤</h2>\n<p>使用 JavaScript 实现拖拽的步骤：</p>\n<ul>\n<li>让元素捕获事件（mousedown, mousemove &#x26; mouseup）</li>\n<li>单击并不释放，触发 mousedown，标记开始拖拽，并获取元素和鼠标的位置</li>\n<li>拖动鼠标，触发 mousemove，不断的获取鼠标的位置，并通过计算重新确定元素的位置</li>\n<li>释放师表，触发 mouseup，结束拖拽，确定元素位置并更新</li>\n</ul>\n<p><strong>被拖拽的元素必须是相对父元素定位，或者是绝对定位</strong></p>\n<!--more-->\n<h2>实现</h2>\n<h3>绑定事件</h3>\n<p>首先，对拖拽的元素绑定 mousedown 时间，使其触发对应的函数，获取元素与鼠标的位置。在 document 对象上绑定 mousemove 和 mouseup 事件，不在拖拽的元素上绑定是因为当鼠标移动太快而超出元素的范围时会停止拖拽，而绑定在 document 上则可以避免这样的事情发生。拖拽再快都不会超出 document 的范围。</p>\n<p>绑定事件：</p>\n<pre><code class=\"language-js\">var box = document.getElementById('box');\n\nbox.onmousedown = down;\ndocument.onmousemove = move;\ndocument.onmouseup = up;\n</code></pre>\n<h2>获取鼠标位置</h2>\n<p>鼠标位置可以在 event 对象中获得，常用的属性有：</p>\n<ul>\n<li>clientX / clientY : 相对浏览器窗口坐标</li>\n<li>offsetX / offsetY : 相对事件目标对象坐标</li>\n<li>pageX / pageY : 相对 document 对象坐标</li>\n</ul>\n<p>一般鼠标的位置使用 <code>pageX / pageY</code> 获取，但是 IE 不支持这两个属性。所以在 IE 中使用 <code>event.clientX + document.body.scrollLeft - document.body.clientLeft;</code> 获取鼠标的位置。</p>\n<p>获取鼠标位置的函数：</p>\n<pre><code class=\"language-js\">function getMouseXY(e) {\n  var x = 0, y = 0;\n  e = e || window.event;\n  if (e.pageX) {\n    x = e.pageX;\n    y = e.pageY;\n  } else {\n    x = e.clientX + document.body.scrollLeft - document.body.clientLeft;\n    y = e.clientY + document.body.scrollTop - document.body.clientTop;\n  }\n  return {\n    x: x,\n    y: y\n  };\n}\n</code></pre>\n<h3>事件触发函数</h3>\n<h4>mousedown</h4>\n<p>当鼠标移动到元素内并点击元素不放时，触发 mousedown 事件。按照上面的步骤，这一步是获取元素与鼠标的位置，用于触发 mousemove 时计算元素的位置。</p>\n<p>mousedown 触发的函数：</p>\n<pre><code class=\"language-js\">function down(e) {\n  dragging = true;\n  boxX = box.offsetLeft;\n  boxY = box.offsetTop;\n  mouseX = parseInt(getMouseXY(e).x);\n  mouseY = parseInt(getMouseXY(e).y);\n  offsetX = mouseX - boxX;\n  offsetY = mouseY - boxY;\n}\n</code></pre>\n<p><code>boxX / boxY</code> 为元素左上角相对于已定位的父元素（相对或者绝对定位的父元素）的偏移的像素值，即元素左上角的坐标。</p>\n<p><code>mouseX / mouseY</code> 是通过 <code>getMouseXY</code> 函数获得的鼠标的坐标。</p>\n<p><code>offsetX/ offsetY</code> 是鼠标相对于元素坐标（左上角坐标）的坐标。</p>\n<h4>mousemove</h4>\n<p>当鼠标移动时，不断的获取鼠标的位置，并计算元素的新坐标修改元素的位置样式。</p>\n<pre><code class=\"language-js\">function move(e) {\n  if (dragging) {\n    var x = getMouseXY(e).x - offsetX;\n    var y = getMouseXY(e).y - offsetY;\n    var width = document.documentElement.clientWidth - box.offsetWidth;\n    var height = document.documentElement.clientHeight - box.offsetHeight;\n\n    x = Math.min(Math.max(0, x), width);\n    y = Math.min(Math.max(0, y), height);\n\n    box.style.left = x + 'px';\n    box.style.top = y + 'px';\n  }\n}\n</code></pre>\n<p>变量 <code>width / height</code> 表示可移动的位置的大小，这里是 document 减去元素的大小（元素不会超出可移动的范围）。</p>\n<p><code>Math.min</code> 使得元素不会超出可移动访问的右边界（元素 x 坐标不会超过 width），<code>Math.max</code> 使得元素不会超出可移动范围的左边界（元素的 x 坐标不小于 0）。</p>\n<p>最后将改变后的元素 <code>left</code> 与 <code>top</code> 值应用当元素上，即修改元素的样式。</p>\n<h4>mouseup</h4>\n<p>拖拽结束，取消拖拽的标记。使其触发 mousemove 事件，但不做任何处理。</p>\n<pre><code class=\"language-js\">function up(e) {\n  dragging = false;\n}\n</code></pre>\n<h2>总结</h2>\n<p>上面使用的简单的 JavaScript 代码实现了元素的拖拽，但并没有对兼容性问题全面考虑，也没有对性能优化，有不必要的事件触发。</p>","rawMarkdownBody":"\n## 步骤\n\n使用 JavaScript 实现拖拽的步骤：\n- 让元素捕获事件（mousedown, mousemove & mouseup）\n- 单击并不释放，触发 mousedown，标记开始拖拽，并获取元素和鼠标的位置\n- 拖动鼠标，触发 mousemove，不断的获取鼠标的位置，并通过计算重新确定元素的位置\n- 释放师表，触发 mouseup，结束拖拽，确定元素位置并更新\n\n**被拖拽的元素必须是相对父元素定位，或者是绝对定位**\n\n<!--more-->\n\n## 实现\n\n### 绑定事件\n\n首先，对拖拽的元素绑定 mousedown 时间，使其触发对应的函数，获取元素与鼠标的位置。在 document 对象上绑定 mousemove 和 mouseup 事件，不在拖拽的元素上绑定是因为当鼠标移动太快而超出元素的范围时会停止拖拽，而绑定在 document 上则可以避免这样的事情发生。拖拽再快都不会超出 document 的范围。\n\n绑定事件：\n```js\nvar box = document.getElementById('box');\n\nbox.onmousedown = down;\ndocument.onmousemove = move;\ndocument.onmouseup = up;\n```\n\n## 获取鼠标位置\n\n鼠标位置可以在 event 对象中获得，常用的属性有：\n- clientX / clientY : 相对浏览器窗口坐标\n- offsetX / offsetY : 相对事件目标对象坐标\n- pageX / pageY : 相对 document 对象坐标\n\n一般鼠标的位置使用 `pageX / pageY` 获取，但是 IE 不支持这两个属性。所以在 IE 中使用 `event.clientX + document.body.scrollLeft - document.body.clientLeft;` 获取鼠标的位置。\n\n获取鼠标位置的函数：\n```js\nfunction getMouseXY(e) {\n  var x = 0, y = 0;\n  e = e || window.event;\n  if (e.pageX) {\n    x = e.pageX;\n    y = e.pageY;\n  } else {\n    x = e.clientX + document.body.scrollLeft - document.body.clientLeft;\n    y = e.clientY + document.body.scrollTop - document.body.clientTop;\n  }\n  return {\n    x: x,\n    y: y\n  };\n}\n```\n\n### 事件触发函数\n#### mousedown\n\n当鼠标移动到元素内并点击元素不放时，触发 mousedown 事件。按照上面的步骤，这一步是获取元素与鼠标的位置，用于触发 mousemove 时计算元素的位置。\n\nmousedown 触发的函数：\n```js\nfunction down(e) {\n  dragging = true;\n  boxX = box.offsetLeft;\n  boxY = box.offsetTop;\n  mouseX = parseInt(getMouseXY(e).x);\n  mouseY = parseInt(getMouseXY(e).y);\n  offsetX = mouseX - boxX;\n  offsetY = mouseY - boxY;\n}\n```\n\n`boxX / boxY` 为元素左上角相对于已定位的父元素（相对或者绝对定位的父元素）的偏移的像素值，即元素左上角的坐标。\n\n`mouseX / mouseY` 是通过 `getMouseXY` 函数获得的鼠标的坐标。\n\n`offsetX/ offsetY` 是鼠标相对于元素坐标（左上角坐标）的坐标。\n\n#### mousemove\n\n当鼠标移动时，不断的获取鼠标的位置，并计算元素的新坐标修改元素的位置样式。\n\n```js\nfunction move(e) {\n  if (dragging) {\n    var x = getMouseXY(e).x - offsetX;\n    var y = getMouseXY(e).y - offsetY;\n    var width = document.documentElement.clientWidth - box.offsetWidth;\n    var height = document.documentElement.clientHeight - box.offsetHeight;\n\n    x = Math.min(Math.max(0, x), width);\n    y = Math.min(Math.max(0, y), height);\n\n    box.style.left = x + 'px';\n    box.style.top = y + 'px';\n  }\n}\n```\n\n变量 `width / height` 表示可移动的位置的大小，这里是 document 减去元素的大小（元素不会超出可移动的范围）。\n\n`Math.min` 使得元素不会超出可移动访问的右边界（元素 x 坐标不会超过 width），`Math.max` 使得元素不会超出可移动范围的左边界（元素的 x 坐标不小于 0）。\n\n最后将改变后的元素 `left` 与 `top` 值应用当元素上，即修改元素的样式。\n\n#### mouseup\n\n拖拽结束，取消拖拽的标记。使其触发 mousemove 事件，但不做任何处理。\n\n```js\nfunction up(e) {\n  dragging = false;\n}\n```\n\n## 总结\n上面使用的简单的 JavaScript 代码实现了元素的拖拽，但并没有对兼容性问题全面考虑，也没有对性能优化，有不必要的事件触发。\n","frontmatter":{"title":"使用 JavaScript 实现简单的拖拽","date":"2016年5月14日","tags":["JavaScript","前端"]}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/use-javascript-to-achieve-simple-drag-and-drop/"}}}