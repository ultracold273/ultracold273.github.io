{"componentChunkName":"component---src-templates-post-tsx","path":"/posts/jade-template-engine/","result":{"data":{"markdownRemark":{"html":"<p>最近在改一个 Hexo 的主题 <a href=\"https://github.com/pinggod/hexo-theme-apollo\">apollo</a>。然后看到这个主题用的是叫做 Jade 的模版引擎写的。之前了解过几个模版引擎 ejs，swig 什么的，但是这些都是在原有的 HTML 中插标签，看起来有点乱。看到 Jade 后就深深的被它那如同 Python 的缩进语法深深吸引了，遂上网学习一发。</p>\n<p>Jade 是 JavaScript 实现的，供 Node 使用，原生支持 Express。但也有 PHP，Python 等其他语言的实现。（要是 HTML 模版用 Jade，CSS 用 Styl，后端用 Python，那岂不是很好玩~全是缩进缩进缩进=。=）</p>\n<h3>DOCTYPE</h3>\n<p>添加文档类型可以通过 <code>!!!</code>  或者 <code>doctype</code> 来添加。</p>\n<!--more-->\n<h3>标签、属性</h3>\n<p> Jade 写起来就跟在 Sublime Text 中用 Emmet 写 HTML 一样。标签直接写，Class 用 <code>.</code>，ID 用 <code>#</code>。不同的是，层级关系 Jade 使用缩进表示，类似于 Python，而 Emmet 插件的写法是只有一行的。结果写出来就是这个样子滴：</p>\n<pre><code class=\"language-jade\">doctype html\nhtml\n    head.class\n        title\n    body#id\n</code></pre>\n<p>渲染出来的结果:</p>\n<pre><code class=\"language-html\">&#x3C;!DOCTYPE html>\n&#x3C;html>\n  &#x3C;head class=\"class\">\n    &#x3C;title>&#x3C;/title>\n  &#x3C;/head>\n  &#x3C;body id=\"id\">\n  &#x3C;/body>\n&#x3C;/html>\n</code></pre>\n<p>看起来超级简洁，而且都不需要去写闭合标签。不过比较需要注意缩进，坏处就是如果复制代码过来的话可能需要重新人脑格式化一下。</p>\n<p>那么问题来了，其他属性怎么办？不是 Class 和 id 的话，就可以在 标签后面加个括号，写在括号里面。当属性值 <code>undefined</code> 或者 <code>null</code> 时，该属性将不会编译。</p>\n<pre><code class=\"language-jade\">a(href=\"http://www.ahonn.me\", class=null)\n</code></pre>\n<p>渲染为：</p>\n<pre><code class=\"language-html\">&#x3C;a href=\"http://www.ahonn.me>&#x3C;/a>\n</code></pre>\n<p>这样就解决了其他属性的问题了~</p>\n<h3>文本</h3>\n<p>那么标签里的文本怎么写呢，so easy~ 只要跟在标签的后面就行了。Like this:</p>\n<pre><code class=\"language-jade\">a(href=\"http://www.ahonn.me\") Ahonn\n</code></pre>\n<p>渲染为：</p>\n<pre><code class=\"language-html\">&#x3C;a href=\"http://www.ahonn.me>Ahonn&#x3C;/a>\n</code></pre>\n<p>大段文本的话可以使用<code>|</code> 或者<code>.</code>：</p>\n<p>使用 <code>|</code>：</p>\n<pre><code class=\"language-jade\">p\n  | one\n  | two\n  | there\n</code></pre>\n<p>使用<code>.</code>:</p>\n<pre><code class=\"language-jade\">p.\n  one\n  two\n  there\n</code></pre>\n<p>上面两种写法渲染后是不一样的，使用 <code>|</code> 的写法渲染后不会换行，而使用 <code>.</code> 会根据格式原样输出。</p>\n<pre><code class=\"language-html\">&#x3C;!-- 使用 | -->\n&#x3C;p>one two there&#x3C;/p>\n&#x3C;!-- 使用 . -->\n&#x3C;p>one\ntwo\nthere\n&#x3C;/p>\n</code></pre>\n<p>在使用 <code>script</code>、<code>style</code>、<code>textarea</code> 等只包含文本标签时，可以不加前缀 <code>|</code>，</p>\n<p>当需要在模版中写 JavaScript 时，推荐使用 <code>.</code>。</p>\n<p>既然是 HTML 模版，那么一定是可以结合数据的。这时候，我们可以用 <code>#{}</code> 将变量包起来。这样的话 <code>#{}</code>  中的值将会被转义成对应的数据。</p>\n<p>例如：</p>\n<pre><code class=\"language-jade\">- var name = \"ahonn\"\np.\n My name is #{name}\n</code></pre>\n<p>渲染为：</p>\n<pre><code class=\"language-html\">&#x3C;p>My name is ahonn&#x3C;/p>\n</code></pre>\n<h3>注释</h3>\n<p>jade 支持 HTML 的注释，即在 html 代码中能看到的注释，还有一种是 Jade 的注释，不会被渲染。</p>\n<pre><code class=\"language-jade\">// HTML 注释\np foo\n//- Jade 注释，这个注释只有在 .jade 文件中显示\np bar\n</code></pre>\n<p>渲染为：</p>\n<pre><code class=\"language-html\">&#x3C;!-- HTML 注释 -->\n&#x3C;p>foo&#x3C;/p>\n&#x3C;p>bar&#x3C;/p>\n</code></pre>\n<h3>代码</h3>\n<p>在 Jade 中可以定义变量，写条件语句或者循环什么的，这时候就需要使用到 <code>-</code> 前缀，这不会被输出。 <code>-</code> 支持 JavaScript 的语法。</p>\n<pre><code class=\"language-jade\">- var foo = 'bar';\n- if (foo === 'bar')\n- for (var key in obj)\n  p= obj[key]\n</code></pre>\n<p>上面写的条件和循环语句是 JavaScript 中的写法，同时 Jade 也有自己的条件和循环语句。</p>\n<p><strong>循环</strong>：</p>\n<pre><code class=\"language-jade\">- var items = [\"one\", \"two\", \"there\"]\neach item, i in items\n  li #{item}: #{i}\n</code></pre>\n<p>渲染为：</p>\n<pre><code class=\"language-html\">&#x3C;li>one: 0&#x3C;/li>\n&#x3C;li>two: 1&#x3C;/li>\n&#x3C;li>three: 2&#x3C;/li>\n</code></pre>\n<p><strong>条件</strong>：</p>\n<p>条件语句类似 Python，不需要加 <code>()</code></p>\n<pre><code class=\"language-jade\">for user in users\n  if user.role == 'admin'\n    p #{user.name} is an admin\n  else\n    p= user.name\n</code></pre>\n<p>Jade 支持转义和非转义输出，使用 <code>=</code> 时将会转义，而 <code>!=</code> 将会原样输出。</p>\n<p>例如：</p>\n<pre><code class=\"language-jade\">- var  ahonn = 'nnoha'\np= ahonn\np!= ahonn\n</code></pre>\n<p>渲染为：</p>\n<pre><code class=\"language-html\">&#x3C;p>nnoha&#x3C;/p>\n&#x3C;p>ahonn&#x3C;/p>\n</code></pre>\n<h3>继承、包含</h3>\n<h4>继承</h4>\n<p>Jade 支持通过 <code>block</code> 和 <code>extends</code> 关键字老实现模版继承，<code>block</code> 部分将在子模块实现。</p>\n<p>举个栗子🌰：</p>\n<p>layout.jade</p>\n<pre><code class=\"language-jade\">!!!\nhtml\n  head\n    block title\n  body\n    block content\n</code></pre>\n<p>index.jade</p>\n<pre><code class=\"language-jade\">extends layout\n\nblock title\n  title= ahonn\n\nblock content\n  p.\n    My name is ahonn.\n    This is index.jade\n</code></pre>\n<p>index.jade 继承 layout.jade，layout 中的 block 部分将在子模版 index 中实现。</p>\n<p>index.jade 渲染为：</p>\n<pre><code class=\"language-html\">&#x3C;DOCTYPE html>\n&#x3C;html>\n  &#x3C;head>\n    &#x3C;title>ahonn&#x3C;/title>\n  &#x3C;/head>\n  &#x3C;body>\n    &#x3C;p>My name is ahonn.\n    This is index.jade\n    &#x3C;/p>\n  &#x3C;/body>\n&#x3C;/html>\n</code></pre>\n<h4>包含</h4>\n<p>Jade 可以使用 <code>include</code> 静态包含其他文件</p>\n<p>head.jade</p>\n<pre><code class=\"language-jade\">head\n  title!= ahonn\n</code></pre>\n<p>body.jade</p>\n<pre><code class=\"language-jade\">body\n  p.\n    My name is ahonn.\n    This is index.jade\n</code></pre>\n<p>index.jade</p>\n<pre><code class=\"language-jade\">html\n  include head\n  include body\n</code></pre>\n<p>渲染结果将于上面继承的相同。</p>\n<h3>Mixins</h3>\n<p>Mixins 相当于 JavaScript 中的函数，实际上 Mixins 在编译过程中就是被转换为 JavaScript 函数的。</p>\n<p>不带参数的 🌰：</p>\n<pre><code class=\"language-jade\">mixin list\n  ul\n    li foo\n    li bar\n\nh2!= Ahonn\n+list()\n</code></pre>\n<p>渲染为：</p>\n<pre><code class=\"language-html\">&#x3C;h2>Ahonn&#x3C;/h2>\n&#x3C;ul>\n  &#x3C;li>foo&#x3C;/li>\n  &#x3C;li>bar&#x3C;/li>\n&#x3C;/ul>\n</code></pre>\n<p>带参数的 🌰：</p>\n<pre><code class=\"language-jade\">mixin list(items)\n  ul\n    - each item in items\n      li= item\n\n- var items = [\"foo\", \"bar\"]\nh2!= Ahonn\n+list(items)\n</code></pre>\n<p>渲染结果与上面无参数的 Mixins 相同。</p>\n<h3>总结</h3>\n<p>使用 Jade 写模版非常的简洁，各种 <code>include</code> 和 <code>extends</code> 使用起来也非常方便，可以模块化的去写各个组件。优点显而易见，对于我这种写 Python 的来说简直是大爱。不过可能这种写法相对于其他模版引擎来说差别较大，跟 HTML 代码的差别也挺大，所以相对来说也是比较少人去用了。而且用这个写的话，写的人来维护的倒是挺方便简洁，但是如果是其他人来维护的话还是比较难上手的，有点增加维护成本的感觉。不过我个人倒是挺喜欢的。</p>","rawMarkdownBody":"\n最近在改一个 Hexo 的主题 [apollo](https://github.com/pinggod/hexo-theme-apollo)。然后看到这个主题用的是叫做 Jade 的模版引擎写的。之前了解过几个模版引擎 ejs，swig 什么的，但是这些都是在原有的 HTML 中插标签，看起来有点乱。看到 Jade 后就深深的被它那如同 Python 的缩进语法深深吸引了，遂上网学习一发。\n\nJade 是 JavaScript 实现的，供 Node 使用，原生支持 Express。但也有 PHP，Python 等其他语言的实现。（要是 HTML 模版用 Jade，CSS 用 Styl，后端用 Python，那岂不是很好玩~全是缩进缩进缩进=。=）\n\n\n### DOCTYPE\n\n添加文档类型可以通过 `!!!`  或者 `doctype ` 来添加。\n\n<!--more-->\n### 标签、属性\n\n Jade 写起来就跟在 Sublime Text 中用 Emmet 写 HTML 一样。标签直接写，Class 用 `.`，ID 用 `#`。不同的是，层级关系 Jade 使用缩进表示，类似于 Python，而 Emmet 插件的写法是只有一行的。结果写出来就是这个样子滴：\n\n``` jade\ndoctype html\nhtml\n\thead.class\n    \ttitle\n    body#id\n```\n\n渲染出来的结果:\n\n``` html\n<!DOCTYPE html>\n<html>\n  <head class=\"class\">\n    <title></title>\n  </head>\n  <body id=\"id\">\n  </body>\n</html>\n```\n\n看起来超级简洁，而且都不需要去写闭合标签。不过比较需要注意缩进，坏处就是如果复制代码过来的话可能需要重新人脑格式化一下。\n\n\n\n那么问题来了，其他属性怎么办？不是 Class 和 id 的话，就可以在 标签后面加个括号，写在括号里面。当属性值 `undefined` 或者 `null` 时，该属性将不会编译。\n\n``` jade\na(href=\"http://www.ahonn.me\", class=null)\n```\n\n渲染为：\n\n``` html\n<a href=\"http://www.ahonn.me></a>\n```\n\n这样就解决了其他属性的问题了~\n\n\n\n### 文本\n\n那么标签里的文本怎么写呢，so easy~ 只要跟在标签的后面就行了。Like this:\n\n``` jade\na(href=\"http://www.ahonn.me\") Ahonn\n```\n\n渲染为：\n\n``` html\n<a href=\"http://www.ahonn.me>Ahonn</a>\n```\n\n\n\n大段文本的话可以使用`|` 或者`.`：\n\n使用 `|`：\n\n``` jade\np\n  | one\n  | two\n  | there\n```\n\n使用`.`:\n\n``` jade\np.\n  one\n  two\n  there\n```\n\n\n\n上面两种写法渲染后是不一样的，使用 `|` 的写法渲染后不会换行，而使用 `.` 会根据格式原样输出。\n\n``` html\n<!-- 使用 | -->\n<p>one two there</p>\n<!-- 使用 . -->\n<p>one\ntwo\nthere\n</p>\n```\n\n在使用 `script`、`style`、`textarea` 等只包含文本标签时，可以不加前缀 `|`，\n\n当需要在模版中写 JavaScript 时，推荐使用 `.`。\n\n\n\n既然是 HTML 模版，那么一定是可以结合数据的。这时候，我们可以用 `#{}` 将变量包起来。这样的话 `#{}`  中的值将会被转义成对应的数据。\n\n例如：\n\n``` jade\n- var name = \"ahonn\"\np.\n My name is #{name}\n```\n\n渲染为：\n\n```html\n<p>My name is ahonn</p>\n```\n\n\n\n### 注释\n\njade 支持 HTML 的注释，即在 html 代码中能看到的注释，还有一种是 Jade 的注释，不会被渲染。\n\n```jade\n// HTML 注释\np foo\n//- Jade 注释，这个注释只有在 .jade 文件中显示\np bar\n```\n\n渲染为：\n\n``` html\n<!-- HTML 注释 -->\n<p>foo</p>\n<p>bar</p>\n```\n\n\n\n### 代码\n\n在 Jade 中可以定义变量，写条件语句或者循环什么的，这时候就需要使用到 `-` 前缀，这不会被输出。 `-` 支持 JavaScript 的语法。\n\n``` jade\n- var foo = 'bar';\n- if (foo === 'bar')\n- for (var key in obj)\n  p= obj[key]\n```\n\n上面写的条件和循环语句是 JavaScript 中的写法，同时 Jade 也有自己的条件和循环语句。\n\n**循环**：\n\n``` jade\n- var items = [\"one\", \"two\", \"there\"]\neach item, i in items\n  li #{item}: #{i}\n```\n\n渲染为：\n\n``` html\n<li>one: 0</li>\n<li>two: 1</li>\n<li>three: 2</li>\n```\n\n**条件**：\n\n条件语句类似 Python，不需要加 `()`\n\n``` jade\nfor user in users\n  if user.role == 'admin'\n    p #{user.name} is an admin\n  else\n    p= user.name\n```\n\n\n\nJade 支持转义和非转义输出，使用 `=` 时将会转义，而 `!=` 将会原样输出。\n\n例如：\n\n``` jade\n- var  ahonn = 'nnoha'\np= ahonn\np!= ahonn\n```\n\n渲染为：\n\n``` html\n<p>nnoha</p>\n<p>ahonn</p>\n```\n\n\n\n### 继承、包含\n\n#### 继承\n\nJade 支持通过 `block` 和 `extends` 关键字老实现模版继承，`block` 部分将在子模块实现。\n\n举个栗子🌰：\n\nlayout.jade\n\n``` jade\n!!!\nhtml\n  head\n  \tblock title\n  body\n  \tblock content\n```\n\nindex.jade\n\n``` jade\nextends layout\n\nblock title\n  title= ahonn\n\nblock content\n  p.\n    My name is ahonn.\n    This is index.jade\n```\n\n\n\nindex.jade 继承 layout.jade，layout 中的 block 部分将在子模版 index 中实现。\n\nindex.jade 渲染为：\n\n``` html\n<DOCTYPE html>\n<html>\n  <head>\n    <title>ahonn</title>\n  </head>\n  <body>\n  \t<p>My name is ahonn.\n    This is index.jade\n    </p>\n  </body>\n</html>\n```\n\n\n\n#### 包含\n\nJade 可以使用 `include` 静态包含其他文件\n\nhead.jade\n\n``` jade\nhead\n  title!= ahonn\n```\n\nbody.jade\n\n``` jade\nbody\n  p.\n    My name is ahonn.\n    This is index.jade\n```\n\nindex.jade\n\n````jade\nhtml\n  include head\n  include body\n````\n\n\n\n渲染结果将于上面继承的相同。\n\n\n\n### Mixins\n\nMixins 相当于 JavaScript 中的函数，实际上 Mixins 在编译过程中就是被转换为 JavaScript 函数的。\n\n不带参数的 🌰：\n\n``` jade\nmixin list\n  ul\n\tli foo\n    li bar\n\nh2!= Ahonn\n+list()\n```\n\n渲染为：\n\n``` html\n<h2>Ahonn</h2>\n<ul>\n  <li>foo</li>\n  <li>bar</li>\n</ul>\n```\n\n\n\n带参数的 🌰：\n\n``` jade\nmixin list(items)\n  ul\n    - each item in items\n      li= item\n\n- var items = [\"foo\", \"bar\"]\nh2!= Ahonn\n+list(items)\n```\n\n渲染结果与上面无参数的 Mixins 相同。\n\n\n\n### 总结\n\n使用 Jade 写模版非常的简洁，各种 `include` 和 `extends` 使用起来也非常方便，可以模块化的去写各个组件。优点显而易见，对于我这种写 Python 的来说简直是大爱。不过可能这种写法相对于其他模版引擎来说差别较大，跟 HTML 代码的差别也挺大，所以相对来说也是比较少人去用了。而且用这个写的话，写的人来维护的倒是挺方便简洁，但是如果是其他人来维护的话还是比较难上手的，有点增加维护成本的感觉。不过我个人倒是挺喜欢的。\n","frontmatter":{"title":"Jade 模板引擎","date":"2016年2月29日","tags":["Jade","前端"]}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/jade-template-engine/"}}}