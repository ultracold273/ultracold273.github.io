{"componentChunkName":"component---src-templates-post-tsx","path":"/posts/using-nokogiri-parsing-html/","result":{"data":{"markdownRemark":{"html":"<p>Nokogiri 是 Ruby 的一个 HTML/XML 文件的解析库。在需要解析 HTML/XML 文件获取数据时，它是一个很好的选择。</p>\n<h2>解析 HTML 文档</h2>\n<p>使用 <code>Nokogiri</code> 解析 HTML 将会生成 <code>Nokogiri documens</code>。\n生成该对象的方式有三种，分别是通过字符串解析，通过文件解析，通过网络解析。</p>\n<h3>通过字符串解析</h3>\n<p>通过字符串解析，即是将字符串当作函数的参数传给 <code>Nokogiri::HTML</code> 函数。</p>\n<pre><code class=\"language-ruby\">doc = Nokogiri::HTML(\"&#x3C;html>&#x3C;body>&#x3C;h1>Ahonn&#x3C;/h1>&#x3C;/body>&#x3C;/html>\")\n</code></pre>\n<!--more-->\n<h3>通过文件解析</h3>\n<p>通过文件解析需要打开文件，并将文件内容当作参数。</p>\n<pre><code class=\"language-ruby\">doc = File.open(\"index.html\") { |f| Nokogiri::HTML(f) }\n</code></pre>\n<h3>通过网络解析</h3>\n<p>这是最常用的形式，即使用 <code>open-uri</code> 打开对应的网址，并返回字符串给 <code>Nokogiri</code>。</p>\n<pre><code class=\"language-ruby\">require \"open-uri\"\ndoc = Nokogiri::HTMl(open(\"http://www.ahonn.me\"))\n</code></pre>\n<h2>搜索 HTML 文档</h2>\n<p>Nokogiri 提供 xpath 以及 css 选择器这两种方式来搜索 HTML 文档，使得我们能够获取到对应的需要的节点及数据。</p>\n<p><code>xpath</code> 方法以及 <code>css</code> 方法返回的是一个节点结果集。</p>\n<pre><code class=\"language-ruby\">doc = Nokogiri::HTML(open(\"http://www.ahonn.me\"))\n\ndoc.xpath(\"//title\")\n\ndoc.css(\".nav-list a\")\n\n# ['&#x3C;a href=\"/\" target=\"_self\" class=\"nav-list-link active\">Home&#x3C;/a>',\n# '&#x3C;a href=\"/archives/\" target=\"_self\" class=\"nav-list-link\">Archives&#x3C;/a>',\n# '&#x3C;a href=\"/tags/\" target=\"_self\" class=\"nav-list-link\">Tags&#x3C;/a>',\n# '&#x3C;a href=\"/about/\" target=\"_self\" class=\"nav-list-link\">About&#x3C;/a>']\n</code></pre>\n<h3>获取单个结果</h3>\n<p>如果想要返回单个结果，可以使用 <code>at_xpath</code> 或者 <code>at_css</code> 方法来获取结果集中的第一个元素。\n就是说返回的不再是结果集，而是元素节点。</p>\n<pre><code class=\"language-ruby\">doc.at_css(\".nav-list a\")\n# &#x3C;a href=\"/\" target=\"_self\" class=\"nav-list-link active\">Home&#x3C;/a>\n</code></pre>\n<h3>获取元素属性</h3>\n<p>还可通过 <code>.</code> 或者索引来获取元素的属性：</p>\n<pre><code class=\"language-ruby\">links = doc.css(\".nav-list a\")\n\nputs links.length # 4\nputs links[0].text # Home\nputs links[1]['href'] # /archives/\n</code></pre>\n<h3>限制选择器</h3>\n<p>Nokogiri 还提供了自定义筛选的限制选择器，返回结果集中符合条件的元素：</p>\n<pre><code class=\"language-ruby\">links = doc.css(\".nav-list a\").select{ |link| link['href'] == \"/archives/\" }\n\nlinks.each { |link| puts link.text }  # Archives\n</code></pre>","rawMarkdownBody":"\nNokogiri 是 Ruby 的一个 HTML/XML 文件的解析库。在需要解析 HTML/XML 文件获取数据时，它是一个很好的选择。\n\n## 解析 HTML 文档\n使用 `Nokogiri` 解析 HTML 将会生成 `Nokogiri documens`。\n生成该对象的方式有三种，分别是通过字符串解析，通过文件解析，通过网络解析。\n\n### 通过字符串解析\n通过字符串解析，即是将字符串当作函数的参数传给 `Nokogiri::HTML` 函数。\n```ruby\ndoc = Nokogiri::HTML(\"<html><body><h1>Ahonn</h1></body></html>\")\n```\n<!--more-->\n\n### 通过文件解析\n通过文件解析需要打开文件，并将文件内容当作参数。\n```ruby\ndoc = File.open(\"index.html\") { |f| Nokogiri::HTML(f) }\n```\n\n### 通过网络解析\n这是最常用的形式，即使用 `open-uri` 打开对应的网址，并返回字符串给 `Nokogiri`。\n```ruby\nrequire \"open-uri\"\ndoc = Nokogiri::HTMl(open(\"http://www.ahonn.me\"))\n```\n\n## 搜索 HTML 文档\nNokogiri 提供 xpath 以及 css 选择器这两种方式来搜索 HTML 文档，使得我们能够获取到对应的需要的节点及数据。\n\n`xpath` 方法以及 `css` 方法返回的是一个节点结果集。\n\n```ruby\ndoc = Nokogiri::HTML(open(\"http://www.ahonn.me\"))\n\ndoc.xpath(\"//title\")\n\ndoc.css(\".nav-list a\")\n\n# ['<a href=\"/\" target=\"_self\" class=\"nav-list-link active\">Home</a>',\n# '<a href=\"/archives/\" target=\"_self\" class=\"nav-list-link\">Archives</a>',\n# '<a href=\"/tags/\" target=\"_self\" class=\"nav-list-link\">Tags</a>',\n# '<a href=\"/about/\" target=\"_self\" class=\"nav-list-link\">About</a>']\n```\n### 获取单个结果\n如果想要返回单个结果，可以使用 `at_xpath` 或者 `at_css` 方法来获取结果集中的第一个元素。\n就是说返回的不再是结果集，而是元素节点。\n\n```ruby\ndoc.at_css(\".nav-list a\")\n# <a href=\"/\" target=\"_self\" class=\"nav-list-link active\">Home</a>\n```\n### 获取元素属性\n还可通过 `.` 或者索引来获取元素的属性：\n```ruby\nlinks = doc.css(\".nav-list a\")\n\nputs links.length # 4\nputs links[0].text # Home\nputs links[1]['href'] # /archives/\n```\n\n### 限制选择器\nNokogiri 还提供了自定义筛选的限制选择器，返回结果集中符合条件的元素：\n```ruby\nlinks = doc.css(\".nav-list a\").select{ |link| link['href'] == \"/archives/\" }\n\nlinks.each { |link| puts link.text }  # Archives\n```\n","frontmatter":{"title":"使用 Nokogiri 解析 HTML","date":"2016年5月28日","tags":["Ruby"]}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/using-nokogiri-parsing-html/"}}}