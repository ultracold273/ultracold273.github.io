{"componentChunkName":"component---src-templates-post-tsx","path":"/posts/create-a-hexo-theme-from-scratch/","result":{"data":{"markdownRemark":{"html":"<h2>写在前面</h2>\n<p>本文将会从零开始开发一个简单的博客主题。样式主要参考 <a href=\"https://hexo.io/themes/\">Hexo theme</a> 中的 <a href=\"https://github.com/lotabout/hexo-theme-noise\">Noise</a> 主题。</p>\n<p>开始之前你需要了解：</p>\n<ul>\n<li>模板引擎</li>\n<li>CSS预处理器</li>\n<li>Hexo 文档</li>\n</ul>\n<p>本文使用的模板引擎为 <a href=\"http://www.embeddedjs.com/\">ejs</a>，使用的 CSS 预处理器为 <a href=\"http://stylus-lang.com/\">stylus</a>。这也是 hexo 项目预装了的 render 插件，如果想使用其他模板引擎或者其他 CSS 预处理器，可以安装相对应的 render 插件。例如我的 <a href=\"https://github.com/ahonn/hexo-theme-even\">Even</a> 主题使用的是 Swig 与 SCSS。</p>\n<p>本文的代码： <a href=\"https://github.com/ahonn/theme-example\">theme-example</a> 。</p>\n<!--more-->\n<h2>目录结构</h2>\n<p>主题目录结构以自带的 <a href=\"https://github.com/hexojs/hexo-theme-landscape\">landscape</a> 主题为例：</p>\n<pre><code>.\n├── languages  语言文件，用于国际化\n├── layout     页面模板文件\n├── scripts    Hexo 脚本\n└── source     主题资源文件，包括页面样式，脚本，字体等\n</code></pre>\n<p>我们在 <code>themes</code> 中新建 <code>theme-example</code> 文件夹，然后在 <code>theme-example</code> 中按照 landscape 主题的目录结构新建 <code>languages</code>，<code>layout</code>，<code>scripts</code> 与 <code>source</code> 文件夹。</p>\n<h2>创建布局模板</h2>\n<p>在 <code>layout</code> 中创建 <code>index.ejs</code> 文件，首页将会使用该布局模板生成 HTML 文件。</p>\n<p><code>layout/index.ejs</code>:</p>\n<pre><code class=\"language-html\">&#x3C;html>\n  &#x3C;head>\n    &#x3C;meta http-equiv=\"content-type\" content=\"text/html; charset=utf-8\">\n    &#x3C;meta content=\"width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0\" name=\"viewport\">\n    &#x3C;title>Home&#x3C;/title>\n  &#x3C;/head>\n  &#x3C;body>\n    &#x3C;h1>Hello Word&#x3C;/h1>\n  &#x3C;/body>\n&#x3C;/html>\n</code></pre>\n<p>修改站点配置文件中的主题配置，使用我们刚刚创建的 <code>theme-example</code> 主题：</p>\n<pre><code class=\"language-yml\"># Extensions\n## Plugins: https://hexo.io/plugins/\n## Themes: https://hexo.io/themes/\ntheme: theme-example\n</code></pre>\n<p>运行 <code>hexo server --debug</code> 以 debug 模式开启 Hexo 本地服务器预览，访问 <a href=\"http://localhost:4000/\">http://localhost:4000/</a>。</p>\n<p><img src=\"https://ahonn-me.oss-cn-beijing.aliyuncs.com/images/6up8p.jpg\" alt=\"Hello World\"></p>\n<h2>添加页面导航</h2>\n<p>现在我们需要在页面中添加导航，由于导航不单单会在首页出现，所以我们在 <code>layout</code> 中创建共用的布局文件 <code>layout.ejs</code>， 同时创建 <code>_partial/head.ejs</code> 保存 HTML 的 head 以及创建 <code>_partial/header.ejs</code> 文件，编写页面导航部分。</p>\n<p><code>layout/layout.ejs</code>:</p>\n<pre><code class=\"language-html\">&#x3C;!DOCTYPE html>\n&#x3C;html>\n  &#x3C;%- partial('_partial/head') %>\n  &#x3C;body>\n    &#x3C;%- partial('_partial/header') %>\n    &#x3C;main class=\"main\">\n      &#x3C;%- body %>\n    &#x3C;/main>\n  &#x3C;/body>\n&#x3C;/html>\n</code></pre>\n<p><code>layout.ejs</code> 文件通过 <code>partial()</code> 函数来包含其他文件，使得我们能够更好的组织代码。详见 <a href=\"https://hexo.io/docs/templates.html#Partials\">Templates | Hexo</a>。</p>\n<p><code>layout/_partial/head.ejs</code>:</p>\n<pre><code class=\"language-html\">&#x3C;head>\n  &#x3C;meta http-equiv=\"content-type\" content=\"text/html; charset=utf-8\">\n  &#x3C;meta content=\"width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0\" name=\"viewport\">\n  &#x3C;title>&#x3C;%= config.title %>&#x3C;/title>\n&#x3C;/head>\n</code></pre>\n<p>这里使用了 <code>config</code> 变量，该变量包含的是站点配置（即站点根目录下 <code>_config.yml</code> 中的配置）。除此之外，Hexo 还提供了许多变量可在模板中使用，详见 <a href=\"https://hexo.io/docs/variables.html\">Variables | Hexo</a>。</p>\n<p><code>layout/_partial/header.ejs</code>:</p>\n<pre><code class=\"language-html\">&#x3C;header class=\"header\">\n  &#x3C;div class=\"blog-title\">\n    &#x3C;a href=\"&#x3C;%- url_for() %>\" class=\"logo\">&#x3C;%= config.title %>&#x3C;/a>\n  &#x3C;/div>\n  &#x3C;nav class=\"navbar\">\n    &#x3C;ul class=\"menu\">\n      &#x3C;li class=\"menu-item\">\n        &#x3C;a href=\"/\" class=\"menu-item-link\">Home&#x3C;/a>\n      &#x3C;/li>\n      &#x3C;li class=\"menu-item\">\n        &#x3C;a href=\"/archives\" class=\"menu-item-link\">Archive&#x3C;/a>\n      &#x3C;/li>\n    &#x3C;/ul>\n  &#x3C;/nav>\n&#x3C;/header>\n</code></pre>\n<p>接着我们清空 <code>index.ejs</code> 中的内容，并添加 <code>&#x3C;h2>Hello World&#x3C;/h2></code>。在 <code>layout</code> 目录下的 <code>index.ejs</code> 会自动继承 <code>layout.ejs</code>，并将其中的内容填入 <code>&#x3C;%- body %></code> 的位置。我们将得到一个有导航菜单的 Hello World 页面。</p>\n<p><img src=\"https://ahonn-me.oss-cn-beijing.aliyuncs.com/images/v7x9h.jpg\" alt=\"Index\"></p>\n<h2>添加主题配置文件</h2>\n<p>实际上我们需要让导航菜单根据我们的需要显示不同的项，上面这种写法不方便修改。所以我们会在主题的配置文件中添加导航菜单的配置。在 <code>thmem-demo</code> 下新建主题的配置文件 <code>_config.yml</code>，在其中添加需要配置的字段。然后可以通过 <code>theme</code> 这个变量来拿到该配置文件中的配置。</p>\n<p><code>theme-example/_config.yml</code>:</p>\n<pre><code class=\"language-yml\">menu:\n  Home: /\n  Archives: /archives\n</code></pre>\n<p>这样我们就可以在 <code>header.ejs</code> 中使用 <code>theme.menu</code> 获取到导航菜单的设置。将 <code>header.ejs</code> 修改为：</p>\n<pre><code class=\"language-html\">&#x3C;header class=\"header\">\n  &#x3C;div class=\"blog-title\">\n    &#x3C;a href=\"&#x3C;%- url_for() %>\" class=\"logo\">&#x3C;%= config.title %>&#x3C;/a>\n  &#x3C;/div>\n  &#x3C;nav class=\"navbar\">\n    &#x3C;ul class=\"menu\">\n      &#x3C;% for (name in theme.menu) { %>\n        &#x3C;li class=\"menu-item\">\n          &#x3C;a href=\"&#x3C;%- url_for(theme.menu[name]) %>\" class=\"menu-item-link\">&#x3C;%= name %>&#x3C;/a>\n        &#x3C;/li>\n      &#x3C;% } %>\n    &#x3C;/ul>\n  &#x3C;/nav>\n&#x3C;/header>\n</code></pre>\n<p>当需要在导航中添加链接的时候就可以在配置文件中直接添加，例如添加 Github 的链接：</p>\n<pre><code class=\"language-yml\">menu:\n  Home: /\n  Archives: /archives\n  Github: https://github.com/ahonn\n</code></pre>\n<p>除此之外还可以添加其他需要的配置，例如 RSS，评论等等。</p>\n<h2>添加首页文章列表</h2>\n<p>接着我们完善首页的模板，使其能够显示文章列表。前面已经说过 Hexo 提供了各种有用的变量，在这里将会使用到 <code>page</code> 这个变量。<code>page</code> 会根据不同的页面拥有不同的属性。具体有什么属性，可以获取到哪些数据可以查看<a href=\"https://hexo.io/docs/variables.html#Page-Variables\">这里</a>。</p>\n<p>那么这里我们会使用 <code>page</code> 变量的 <code>posts</code> 属性拿到文章数据的集合。编辑 <code>index.ejs</code> 文件：</p>\n<pre><code class=\"language-html\">&#x3C;section class=\"posts\">\n  &#x3C;% page.posts.each(function (post) { %>\n    &#x3C;article class=\"post\">\n      &#x3C;div class=\"post-title\">\n        &#x3C;a class=\"post-title-link\" href=\"&#x3C;%- url_for(post.path) %>\">&#x3C;%= post.title %>&#x3C;/a>\n      &#x3C;/div>\n      &#x3C;div class=\"post-content\">\n        &#x3C;%- post.content %>\n      &#x3C;/div>\n      &#x3C;div class=\"post-meta\">\n        &#x3C;span class=\"post-time\">&#x3C;%- date(post.date, \"YYYY-MM-DD\") %>&#x3C;/span>\n      &#x3C;/div>\n    &#x3C;/article>\n  &#x3C;% }) %>\n&#x3C;/section>\n</code></pre>\n<p>从 <code>page.posts</code> 中获取单篇文章的数据，并获取文章的标题，内容等数据填充到模板中。处理文章创建时间的时候使用了 <code>date()</code> 函数，这是 Hexo 提供的时间处理的<a href=\"https://hexo.io/docs/helpers.html#date\">辅助函数</a>。本文中使用到的函数如无特别说明，即为 Hexo 的辅助函数。</p>\n<h3>文章摘录</h3>\n<p>由于首页显示文章内容时使用的是 <code>post.content</code>，即文章的全部内容。所以首页会显示每一篇文章的内容，实际上我们并不想在首页显示那么多内容，只想显示文章的摘录。</p>\n<p>Hexo 提供了 <code>excerpt</code> 属性来获取文章的摘录部分，不过这里需要在文章中添加一个 <code>&#x3C;!--more--></code> 标记。添加了这个标记之后，<code>post.excerpt</code> 将会获取到标记之前的内容。如果没有这个标记，那么 <code>post.excerpt</code> 会是空的。所以我们可以把首页文章内容部分的 <code>post.content</code> 替换成 <code>post.excerpt</code>。</p>\n<pre><code class=\"language-html\">&#x3C;div class=\"post-content\">\n  &#x3C;%- post.excerpt %>\n&#x3C;/div>\n</code></pre>\n<h2>添加页面样式</h2>\n<p>到目前为止，我们完成了首页的页面结构，但是并没有添加样式，所以看起来很丑。我们在 <code>source</code> 文件中创建一个 <code>css</code> 文件夹来存放样式文件。</p>\n<p>由于 Hexo 在新建项目的时候会安装 <code>hexo-renderer-stylus</code> 这个插件，所以我们无需其他步骤，只需要将样式文件放到 <code>css</code> 文件夹中。Hexo 在生成页面的时候会将 <code>source</code> 中的所有文件复制到生成的 <code>public</code> 文件中，并且在此之前会编译 styl 为 css 文件。</p>\n<p>在 <code>css</code> 文件夹中创建 <code>style.styl</code>，编写一些基础的样式，并把所有样式 <code>import</code> 到这个文件。所以最终编译之后只会有 <code>style.css</code> 一个文件。创建 <code>_partial/header.styl</code> 与 <code>_partial/post.styl</code> 存放页面导航以及文章的样式，并且在 <code>style.styl</code> 中 <code>import</code> 这两个文件。</p>\n<p><code>_partial/header.styl</code>:</p>\n<pre><code class=\"language-stylus\">.header {\n  margin-top: 2em\n  display: flex\n  align-items: baseline\n  justify-content: space-between\n\n  .blog-title .logo {\n    color: #AAA;\n    font-size: 2em;\n    font-family: \"Comic Sans MS\",cursive,LiSu,sans-serif;\n    text-decoration: none;\n  }\n\n  .menu {\n    margin: 0;\n    padding: 0;\n\n    .menu-item {\n      display: inline-block;\n      margin-right: 10px;\n    }\n\n    .menu-item-link {\n      color: #AAA;\n      text-decoration: none;\n\n      &#x26;:hover {\n        color: #368CCB;\n      }\n    }\n  }\n}\n</code></pre>\n<p><code>_partial/post.style</code>:</p>\n<pre><code class=\"language-stylus\">.post {\n  margin: 1em auto;\n  padding: 30px 50px;\n  background-color: #fff;\n  border: 1px solid #ddd;\n  box-shadow: 0 0 2px #ddd;\n}\n\n.posts  {\n  .post:first-child {\n    margin-top: 0;\n  }\n\n  .post-title {\n    font-size: 1.5em;\n\n    .post-title-link {\n      color: #368CCB;\n      text-decoration: none;\n    }\n  }\n\n  .post-content {\n    a {\n      color: #368CCB;\n      text-decoration: none;\n    }\n  }\n\n  .post-meta {\n    color: #BABABA;\n  }\n}\n</code></pre>\n<p><code>style.styl</code>:</p>\n<pre><code class=\"language-stylus\">body {\n  background-color: #F2F2F2;\n  font-size: 1.25rem;\n  line-height: 1.5;\n}\n\n.container {\n  max-width: 960px;\n  margin: 0 auto;\n}\n\n@import \"_partial/header\";\n@import \"_partial/post\";\n</code></pre>\n<p>最后，我们需要把样式添加到页面中，这里使用了另外一个辅助函数 <a href=\"https://hexo.io/docs/helpers.html#css\"><code>css()</code></a>:</p>\n<p><code>layout/_partial/head.ejs</code></p>\n<pre><code class=\"language-html\">&#x3C;head>\n  &#x3C;meta http-equiv=\"content-type\" content=\"text/html; charset=utf-8\">\n  &#x3C;meta content=\"width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0\" name=\"viewport\">\n  &#x3C;title>&#x3C;%= config.title %>&#x3C;/title>\n  &#x3C;%- css('css/style.css') %>\n&#x3C;/head>\n</code></pre>\n<p>至此，我们会看到站点的首页是这个样子的：</p>\n<p><img src=\"https://ahonn-me.oss-cn-beijing.aliyuncs.com/images/z38nr.jpg\" alt=\"Home Page\"></p>\n<p><strong>注意，这里会报错。原因是生成文章页时没有找到对应的模版，所以使用了首页的模版，但文章页并没有 <code>page.posts</code> 这个属性（undefined 没有 each 方法）。新建 post.ejs 即可解决，或直接跳过直到完成文章页模版。</strong></p>\n<h2>添加分页</h2>\n<p>在站点的 <code>source/_post/</code> 目录下存放的是我们的文章，现在我们把原本的 <code>hello-world.md</code> 复制黏贴 10+ 次，再查看站点首页。会发现，首页只显示了 10 篇文章。</p>\n<p>首页显示的文章数量我们可以通过站点配置文件中的 <code>per_page</code> 字段来修改，但是我们不可能把所有文章都放在一页，所以我们现在来添加文章列表的分页。</p>\n<p>新建 <code>_partial/paginator.ejs</code>:</p>\n<pre><code class=\"language-html\">&#x3C;% if (page.total > 1){ %>\n  &#x3C;nav class=\"page-nav\">\n    &#x3C;%- paginator({\n      prev_text: \"&#x26;laquo; Prev\",\n      next_text: \"Next &#x26;raquo;\"\n    }) %>\n  &#x3C;/nav>\n&#x3C;% } %>\n</code></pre>\n<p>在 <code>index.ejs</code> 中添加这个文件的内容：</p>\n<pre><code class=\"language-html\">...\n&#x3C;/section>\n&#x3C;%- partial('_partial/paginator') %>\n</code></pre>\n<p>这里我们使用到了另外的一个辅助函数 <a href=\"https://hexo.io/docs/helpers.html#paginator\"><code>paginator</code></a>，它能够帮助我们插入分页链接。</p>\n<h2>添加文章详情页</h2>\n<p>文章详情页对应的布局文件是 <code>post.ejs</code>，新建 <code>post.ejs</code>:</p>\n<pre><code class=\"language-html\">&#x3C;article class=\"post\">\n  &#x3C;div class=\"post-title\">\n    &#x3C;h2 class=\"title\">&#x3C;%= page.title %>&#x3C;/h2>\n  &#x3C;/div>\n   &#x3C;div class=\"post-meta\">\n    &#x3C;span class=\"post-time\">&#x3C;%- date(page.date, \"YYYY-MM-DD\") %>&#x3C;/span>\n  &#x3C;/div>\n  &#x3C;div class=\"post-content\">\n    &#x3C;%- page.content %>\n  &#x3C;/div>\n&#x3C;/article>\n</code></pre>\n<p>由于这里是文章的模板，所以变量 <code>page</code> 表示的是文章的数据，而不是首页的文章数据集合。</p>\n<h2>添加归档页</h2>\n<p>创建归档页使用的模板文件 <code>archive.ejs</code>:</p>\n<pre><code class=\"language-html\">&#x3C;section class=\"archive\">\n  &#x3C;ul class=\"post-archive\">\n    &#x3C;% page.posts.each(function (post) { %>\n      &#x3C;li class=\"post-item\">\n        &#x3C;span class=\"post-date\">&#x3C;%= date(post.date, \"YYYY-MM-DD\") %>&#x3C;/span>\n        &#x3C;a class=\"post-title\" href=\"&#x3C;%- url_for(post.path) %>\">&#x3C;%= post.title %>&#x3C;/a>\n      &#x3C;/li>\n    &#x3C;% }) %>\n  &#x3C;/ul>\n&#x3C;/section>\n&#x3C;%- partial('_partial/paginator') %>\n</code></pre>\n<p>其实结构跟首页差不多，只是不显示文章内容而已。添加归档页的样式：</p>\n<p><code>css/_partial/archive.styl</code>:</p>\n<pre><code class=\"language-stylus\">.archive {\n  margin: 1em auto;\n  padding: 30px 50px;\n  background-color: #fff;\n  border: 1px solid #ddd;\n  box-shadow: 0 0 2px #ddd;\n\n  .post-archive {\n    list-style: none;\n    padding: 0;\n\n    .post-item {\n      margin: 5px 0;\n\n      .post-date {\n        display: inline-block;\n        margin-right: 10px;\n        color: #BABABA;\n      }\n\n      .post-title {\n        color: #368CCB;\n        text-decoration: none;\n      }\n    }\n  }\n}\n</code></pre>\n<h2>国际化</h2>\n<p>还记得我们一开始创建的 <code>languages</code> 文件夹吗？没错，它是用来添加多种语言，用于 i18n 的。站点的语言设置为站点配置文件中的 <code>language</code>。</p>\n<p>当该字段为空时，默认使用的是 <code>languages/default.yml</code> 这个文件。那么现在我们来添加这个文件，我们决定主题的默认语言是英文：</p>\n<pre><code class=\"language-yml\">Menu:\n  Home: Home\n  Archives: Archives\n  Github: Github\n\nPaginator:\n  Prev: Prev\n  Next: Next\n</code></pre>\n<p>目前我们需要主题根据选择的语言自动修改的有上面这些，接着我们需要修改 <code>header.ejs</code> 与 <code>paginator.ejs</code> 这两个文件：</p>\n<p><code>_partial/header.ejs</code></p>\n<pre><code class=\"language-html\">&#x3C;header class=\"header\">\n  &#x3C;div class=\"blog-title\">\n    &#x3C;a href=\"&#x3C;%- url_for() %>\" class=\"logo\">&#x3C;%= config.title %>&#x3C;/a>\n  &#x3C;/div>\n  &#x3C;nav class=\"navbar\">\n    &#x3C;ul class=\"menu\">\n      &#x3C;% for (name in theme.menu) { %>\n        &#x3C;li class=\"menu-item\">\n          &#x3C;a href=\"&#x3C;%- url_for(theme.menu[name]) %>\" class=\"menu-item-link\">&#x3C;%- __('Menu.' + name) %>&#x3C;/a>\n        &#x3C;/li>\n      &#x3C;% } %>\n    &#x3C;/ul>\n  &#x3C;/nav>\n&#x3C;/header>\n</code></pre>\n<p><code>_partial/paginator.ejs</code>:</p>\n<pre><code class=\"language-html\">&#x3C;% if (page.total > 1){ %>\n  &#x3C;nav class=\"page-nav\">\n    &#x3C;%- paginator({\n      prev_text: \"&#x26;laquo;\" + __('Paginator.Prev'),\n      next_text: __('Paginator.Next') + \"&#x26;raquo;\"\n    }) %>\n  &#x3C;/nav>\n&#x3C;% } %>\n</code></pre>\n<p>修改之后其实与之前相比没有什么变化，起码看起来是。现在我们添加一个中文的文件：</p>\n<p><code>languages/zh-CN.yml</code></p>\n<pre><code class=\"language-yml\">Menu:\n  Home: 首页\n  Archives: 归档\n  Github: 交友\n\nPaginator:\n  Prev: 上一页\n  Next: 下一页\n</code></pre>\n<p>然后我们将站点配置文件中的 <code>language</code> 字段修改为 <code>zh-CN</code>（与 <code>zh-CN.yml</code> 文件名相同）。再次访问站点之后就会发现导航与分页部分的文字变成了中文。</p>\n<h2>最后总结</h2>\n<p>如果你有耐心看我废话了这么多的话，恭喜你，你应该对怎么去写一个 Hexo 主题有了一定的了解。其实说白了，Hexo 就是把那些 Markdown 文件按照不同的布局模板，填上对应的数据生成 HTML 页面，复制 <code>source</code> 中的到生成的 <code>public</code> 文件夹中，中间过程会把需要编译的 stylus/less/sass 等文件编译。</p>\n<p>本文并没有提及有关页面 JavaScript 的部分，实际上与写 CSS 样式相同。在 <code>source/js</code> 中写 JavaScript 脚本，然后在模板中引入即可。</p>\n<p>感谢阅读，希望对你有所帮助。</p>","rawMarkdownBody":"## 写在前面\n本文将会从零开始开发一个简单的博客主题。样式主要参考 [Hexo theme](https://hexo.io/themes/) 中的 [Noise](https://github.com/lotabout/hexo-theme-noise) 主题。\n\n开始之前你需要了解：\n- 模板引擎\n- CSS预处理器\n- Hexo 文档\n\n本文使用的模板引擎为 [ejs](http://www.embeddedjs.com/)，使用的 CSS 预处理器为 [stylus](http://stylus-lang.com/)。这也是 hexo 项目预装了的 render 插件，如果想使用其他模板引擎或者其他 CSS 预处理器，可以安装相对应的 render 插件。例如我的 [Even](https://github.com/ahonn/hexo-theme-even) 主题使用的是 Swig 与 SCSS。\n\n本文的代码： [theme-example](https://github.com/ahonn/theme-example) 。\n\n<!--more-->\n\n## 目录结构\n主题目录结构以自带的 [landscape](https://github.com/hexojs/hexo-theme-landscape) 主题为例：\n\n```\n.\n├── languages  语言文件，用于国际化\n├── layout     页面模板文件\n├── scripts    Hexo 脚本\n└── source     主题资源文件，包括页面样式，脚本，字体等\n```\n\n我们在 `themes` 中新建 `theme-example` 文件夹，然后在 `theme-example` 中按照 landscape 主题的目录结构新建 `languages`，`layout`，`scripts` 与 `source` 文件夹。\n\n## 创建布局模板\n在 `layout` 中创建 `index.ejs` 文件，首页将会使用该布局模板生成 HTML 文件。\n\n`layout/index.ejs`:\n\n``` html\n<html>\n  <head>\n    <meta http-equiv=\"content-type\" content=\"text/html; charset=utf-8\">\n    <meta content=\"width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0\" name=\"viewport\">\n    <title>Home</title>\n  </head>\n  <body>\n    <h1>Hello Word</h1>\n  </body>\n</html>\n```\n\n修改站点配置文件中的主题配置，使用我们刚刚创建的 `theme-example` 主题：\n\n``` yml\n# Extensions\n## Plugins: https://hexo.io/plugins/\n## Themes: https://hexo.io/themes/\ntheme: theme-example\n```\n\n运行 `hexo server --debug` 以 debug 模式开启 Hexo 本地服务器预览，访问 [http://localhost:4000/](http://localhost:4000/)。\n\n![Hello World](https://ahonn-me.oss-cn-beijing.aliyuncs.com/images/6up8p.jpg)\n\n## 添加页面导航\n\n现在我们需要在页面中添加导航，由于导航不单单会在首页出现，所以我们在 `layout` 中创建共用的布局文件 `layout.ejs`， 同时创建 `_partial/head.ejs` 保存 HTML 的 head 以及创建 `_partial/header.ejs` 文件，编写页面导航部分。\n\n`layout/layout.ejs`:\n``` html\n<!DOCTYPE html>\n<html>\n  <%- partial('_partial/head') %>\n  <body>\n    <%- partial('_partial/header') %>\n    <main class=\"main\">\n      <%- body %>\n    </main>\n  </body>\n</html>\n```\n\n`layout.ejs` 文件通过 `partial()` 函数来包含其他文件，使得我们能够更好的组织代码。详见 [Templates | Hexo](https://hexo.io/docs/templates.html#Partials)。\n\n`layout/_partial/head.ejs`:\n``` html\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html; charset=utf-8\">\n  <meta content=\"width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0\" name=\"viewport\">\n  <title><%= config.title %></title>\n</head>\n```\n\n这里使用了 `config` 变量，该变量包含的是站点配置（即站点根目录下 `_config.yml` 中的配置）。除此之外，Hexo 还提供了许多变量可在模板中使用，详见 [Variables | Hexo](https://hexo.io/docs/variables.html)。\n\n`layout/_partial/header.ejs`:\n``` html\n<header class=\"header\">\n  <div class=\"blog-title\">\n    <a href=\"<%- url_for() %>\" class=\"logo\"><%= config.title %></a>\n  </div>\n  <nav class=\"navbar\">\n    <ul class=\"menu\">\n      <li class=\"menu-item\">\n        <a href=\"/\" class=\"menu-item-link\">Home</a>\n      </li>\n      <li class=\"menu-item\">\n        <a href=\"/archives\" class=\"menu-item-link\">Archive</a>\n      </li>\n    </ul>\n  </nav>\n</header>\n```\n\n接着我们清空 `index.ejs` 中的内容，并添加 `<h2>Hello World</h2>`。在 `layout` 目录下的 `index.ejs` 会自动继承 `layout.ejs`，并将其中的内容填入 `<%- body %>` 的位置。我们将得到一个有导航菜单的 Hello World 页面。\n\n![Index](https://ahonn-me.oss-cn-beijing.aliyuncs.com/images/v7x9h.jpg)\n\n## 添加主题配置文件\n\n实际上我们需要让导航菜单根据我们的需要显示不同的项，上面这种写法不方便修改。所以我们会在主题的配置文件中添加导航菜单的配置。在 `thmem-demo` 下新建主题的配置文件 `_config.yml`，在其中添加需要配置的字段。然后可以通过 `theme` 这个变量来拿到该配置文件中的配置。\n\n`theme-example/_config.yml`:\n\n``` yml\nmenu:\n  Home: /\n  Archives: /archives\n```\n\n这样我们就可以在 `header.ejs` 中使用 `theme.menu` 获取到导航菜单的设置。将 `header.ejs` 修改为：\n\n``` html\n<header class=\"header\">\n  <div class=\"blog-title\">\n    <a href=\"<%- url_for() %>\" class=\"logo\"><%= config.title %></a>\n  </div>\n  <nav class=\"navbar\">\n    <ul class=\"menu\">\n      <% for (name in theme.menu) { %>\n        <li class=\"menu-item\">\n          <a href=\"<%- url_for(theme.menu[name]) %>\" class=\"menu-item-link\"><%= name %></a>\n        </li>\n      <% } %>\n    </ul>\n  </nav>\n</header>\n```\n\n当需要在导航中添加链接的时候就可以在配置文件中直接添加，例如添加 Github 的链接：\n\n``` yml\nmenu:\n  Home: /\n  Archives: /archives\n  Github: https://github.com/ahonn\n```\n\n除此之外还可以添加其他需要的配置，例如 RSS，评论等等。\n\n## 添加首页文章列表\n接着我们完善首页的模板，使其能够显示文章列表。前面已经说过 Hexo 提供了各种有用的变量，在这里将会使用到 `page` 这个变量。`page` 会根据不同的页面拥有不同的属性。具体有什么属性，可以获取到哪些数据可以查看[这里](https://hexo.io/docs/variables.html#Page-Variables)。\n\n那么这里我们会使用 `page` 变量的 `posts` 属性拿到文章数据的集合。编辑 `index.ejs` 文件：\n\n``` html\n<section class=\"posts\">\n  <% page.posts.each(function (post) { %>\n    <article class=\"post\">\n      <div class=\"post-title\">\n        <a class=\"post-title-link\" href=\"<%- url_for(post.path) %>\"><%= post.title %></a>\n      </div>\n      <div class=\"post-content\">\n        <%- post.content %>\n      </div>\n      <div class=\"post-meta\">\n        <span class=\"post-time\"><%- date(post.date, \"YYYY-MM-DD\") %></span>\n      </div>\n    </article>\n  <% }) %>\n</section>\n```\n\n从 `page.posts` 中获取单篇文章的数据，并获取文章的标题，内容等数据填充到模板中。处理文章创建时间的时候使用了 `date()` 函数，这是 Hexo 提供的时间处理的[辅助函数](https://hexo.io/docs/helpers.html#date)。本文中使用到的函数如无特别说明，即为 Hexo 的辅助函数。\n\n### 文章摘录\n\n由于首页显示文章内容时使用的是 `post.content`，即文章的全部内容。所以首页会显示每一篇文章的内容，实际上我们并不想在首页显示那么多内容，只想显示文章的摘录。\n\nHexo 提供了 `excerpt` 属性来获取文章的摘录部分，不过这里需要在文章中添加一个 `<!--more-->` 标记。添加了这个标记之后，`post.excerpt` 将会获取到标记之前的内容。如果没有这个标记，那么 `post.excerpt` 会是空的。所以我们可以把首页文章内容部分的 `post.content` 替换成 `post.excerpt`。\n\n``` html\n<div class=\"post-content\">\n  <%- post.excerpt %>\n</div>\n```\n\n## 添加页面样式\n到目前为止，我们完成了首页的页面结构，但是并没有添加样式，所以看起来很丑。我们在 `source` 文件中创建一个 `css` 文件夹来存放样式文件。\n\n由于 Hexo 在新建项目的时候会安装 `hexo-renderer-stylus` 这个插件，所以我们无需其他步骤，只需要将样式文件放到 `css` 文件夹中。Hexo 在生成页面的时候会将 `source` 中的所有文件复制到生成的 `public` 文件中，并且在此之前会编译 styl 为 css 文件。\n\n在 `css` 文件夹中创建 `style.styl`，编写一些基础的样式，并把所有样式 `import` 到这个文件。所以最终编译之后只会有 `style.css` 一个文件。创建 `_partial/header.styl` 与 `_partial/post.styl` 存放页面导航以及文章的样式，并且在 `style.styl` 中 `import` 这两个文件。\n\n`_partial/header.styl`:\n\n``` stylus\n.header {\n  margin-top: 2em\n  display: flex\n  align-items: baseline\n  justify-content: space-between\n\n  .blog-title .logo {\n    color: #AAA;\n    font-size: 2em;\n    font-family: \"Comic Sans MS\",cursive,LiSu,sans-serif;\n    text-decoration: none;\n  }\n\n  .menu {\n    margin: 0;\n    padding: 0;\n\n    .menu-item {\n      display: inline-block;\n      margin-right: 10px;\n    }\n\n    .menu-item-link {\n      color: #AAA;\n      text-decoration: none;\n\n      &:hover {\n        color: #368CCB;\n      }\n    }\n  }\n}\n```\n\n`_partial/post.style`:\n\n``` stylus\n.post {\n  margin: 1em auto;\n  padding: 30px 50px;\n  background-color: #fff;\n  border: 1px solid #ddd;\n  box-shadow: 0 0 2px #ddd;\n}\n\n.posts  {\n  .post:first-child {\n    margin-top: 0;\n  }\n\n  .post-title {\n    font-size: 1.5em;\n\n    .post-title-link {\n      color: #368CCB;\n      text-decoration: none;\n    }\n  }\n\n  .post-content {\n    a {\n      color: #368CCB;\n      text-decoration: none;\n    }\n  }\n\n  .post-meta {\n    color: #BABABA;\n  }\n}\n```\n\n`style.styl`:\n\n``` stylus\nbody {\n  background-color: #F2F2F2;\n  font-size: 1.25rem;\n  line-height: 1.5;\n}\n\n.container {\n  max-width: 960px;\n  margin: 0 auto;\n}\n\n@import \"_partial/header\";\n@import \"_partial/post\";\n```\n\n最后，我们需要把样式添加到页面中，这里使用了另外一个辅助函数 [`css()`](https://hexo.io/docs/helpers.html#css):\n\n`layout/_partial/head.ejs`\n``` html\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html; charset=utf-8\">\n  <meta content=\"width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0\" name=\"viewport\">\n  <title><%= config.title %></title>\n  <%- css('css/style.css') %>\n</head>\n```\n\n至此，我们会看到站点的首页是这个样子的：\n\n![Home Page](https://ahonn-me.oss-cn-beijing.aliyuncs.com/images/z38nr.jpg)\n\n**注意，这里会报错。原因是生成文章页时没有找到对应的模版，所以使用了首页的模版，但文章页并没有 `page.posts` 这个属性（undefined 没有 each 方法）。新建 post.ejs 即可解决，或直接跳过直到完成文章页模版。**\n\n## 添加分页\n在站点的 `source/_post/` 目录下存放的是我们的文章，现在我们把原本的 `hello-world.md` 复制黏贴 10+ 次，再查看站点首页。会发现，首页只显示了 10 篇文章。\n\n首页显示的文章数量我们可以通过站点配置文件中的 `per_page` 字段来修改，但是我们不可能把所有文章都放在一页，所以我们现在来添加文章列表的分页。\n\n新建 `_partial/paginator.ejs`:\n\n``` html\n<% if (page.total > 1){ %>\n  <nav class=\"page-nav\">\n    <%- paginator({\n      prev_text: \"&laquo; Prev\",\n      next_text: \"Next &raquo;\"\n    }) %>\n  </nav>\n<% } %>\n```\n\n在 `index.ejs` 中添加这个文件的内容：\n\n``` html\n...\n</section>\n<%- partial('_partial/paginator') %>\n```\n\n这里我们使用到了另外的一个辅助函数 [`paginator`](https://hexo.io/docs/helpers.html#paginator)，它能够帮助我们插入分页链接。\n\n## 添加文章详情页\n文章详情页对应的布局文件是 `post.ejs`，新建 `post.ejs`:\n\n``` html\n<article class=\"post\">\n  <div class=\"post-title\">\n    <h2 class=\"title\"><%= page.title %></h2>\n  </div>\n   <div class=\"post-meta\">\n    <span class=\"post-time\"><%- date(page.date, \"YYYY-MM-DD\") %></span>\n  </div>\n  <div class=\"post-content\">\n    <%- page.content %>\n  </div>\n</article>\n```\n\n由于这里是文章的模板，所以变量 `page` 表示的是文章的数据，而不是首页的文章数据集合。\n\n## 添加归档页\n创建归档页使用的模板文件 `archive.ejs`:\n\n``` html\n<section class=\"archive\">\n  <ul class=\"post-archive\">\n    <% page.posts.each(function (post) { %>\n      <li class=\"post-item\">\n        <span class=\"post-date\"><%= date(post.date, \"YYYY-MM-DD\") %></span>\n        <a class=\"post-title\" href=\"<%- url_for(post.path) %>\"><%= post.title %></a>\n      </li>\n    <% }) %>\n  </ul>\n</section>\n<%- partial('_partial/paginator') %>\n```\n\n其实结构跟首页差不多，只是不显示文章内容而已。添加归档页的样式：\n\n`css/_partial/archive.styl`:\n\n``` stylus\n.archive {\n  margin: 1em auto;\n  padding: 30px 50px;\n  background-color: #fff;\n  border: 1px solid #ddd;\n  box-shadow: 0 0 2px #ddd;\n\n  .post-archive {\n    list-style: none;\n    padding: 0;\n\n    .post-item {\n      margin: 5px 0;\n\n      .post-date {\n        display: inline-block;\n        margin-right: 10px;\n        color: #BABABA;\n      }\n\n      .post-title {\n        color: #368CCB;\n        text-decoration: none;\n      }\n    }\n  }\n}\n```\n\n## 国际化\n还记得我们一开始创建的 `languages` 文件夹吗？没错，它是用来添加多种语言，用于 i18n 的。站点的语言设置为站点配置文件中的 `language`。\n\n当该字段为空时，默认使用的是 `languages/default.yml` 这个文件。那么现在我们来添加这个文件，我们决定主题的默认语言是英文：\n\n``` yml\nMenu:\n  Home: Home\n  Archives: Archives\n  Github: Github\n\nPaginator:\n  Prev: Prev\n  Next: Next\n```\n\n目前我们需要主题根据选择的语言自动修改的有上面这些，接着我们需要修改 `header.ejs` 与 `paginator.ejs` 这两个文件：\n\n`_partial/header.ejs`\n``` html\n<header class=\"header\">\n  <div class=\"blog-title\">\n    <a href=\"<%- url_for() %>\" class=\"logo\"><%= config.title %></a>\n  </div>\n  <nav class=\"navbar\">\n    <ul class=\"menu\">\n      <% for (name in theme.menu) { %>\n        <li class=\"menu-item\">\n          <a href=\"<%- url_for(theme.menu[name]) %>\" class=\"menu-item-link\"><%- __('Menu.' + name) %></a>\n        </li>\n      <% } %>\n    </ul>\n  </nav>\n</header>\n```\n\n`_partial/paginator.ejs`:\n``` html\n<% if (page.total > 1){ %>\n  <nav class=\"page-nav\">\n    <%- paginator({\n      prev_text: \"&laquo;\" + __('Paginator.Prev'),\n      next_text: __('Paginator.Next') + \"&raquo;\"\n    }) %>\n  </nav>\n<% } %>\n```\n\n修改之后其实与之前相比没有什么变化，起码看起来是。现在我们添加一个中文的文件：\n\n`languages/zh-CN.yml`\n``` yml\nMenu:\n  Home: 首页\n  Archives: 归档\n  Github: 交友\n\nPaginator:\n  Prev: 上一页\n  Next: 下一页\n```\n\n然后我们将站点配置文件中的 `language` 字段修改为 `zh-CN`（与 `zh-CN.yml` 文件名相同）。再次访问站点之后就会发现导航与分页部分的文字变成了中文。\n\n## 最后总结\n\n如果你有耐心看我废话了这么多的话，恭喜你，你应该对怎么去写一个 Hexo 主题有了一定的了解。其实说白了，Hexo 就是把那些 Markdown 文件按照不同的布局模板，填上对应的数据生成 HTML 页面，复制 `source` 中的到生成的 `public` 文件夹中，中间过程会把需要编译的 stylus/less/sass 等文件编译。\n\n本文并没有提及有关页面 JavaScript 的部分，实际上与写 CSS 样式相同。在 `source/js` 中写 JavaScript 脚本，然后在模板中引入即可。\n\n感谢阅读，希望对你有所帮助。\n","frontmatter":{"title":"从零开始制作 Hexo 主题","date":"2016年12月15日","tags":["Hexo","前端"]}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/create-a-hexo-theme-from-scratch/"}}}