{"componentChunkName":"component---src-templates-post-tsx","path":"/javascript-apply-call-and-bind/","result":{"data":{"markdownRemark":{"html":"<p>最近在看 《JavaScript 高级程序设计》，也就是所谓的高程3。正好看到 <code>Function</code> 部分，看到了几个熟悉的字眼，<code>apply()</code>，<code>call()</code> 和 <code>bind()</code>。好像是有些面试题里面有，遂搞清楚了记录下。</p>\n<h2>apply() 与 call()</h2>\n<p>每个函数都包含两个非继承的方法：<code>apply()</code> 和 <code>call()</code>。两个方法的用途都是在特定的作用域中调用函数，实际上等于设置函数体内 <code>this</code> 对象的值。这是书中的说法，大概意思就是 <code>apply()</code> 和 <code>call()</code> 这两个方法是用来改变函数中 <code>this</code> 的指向的。而 <code>apply()</code> 与 <code>call()</code> 的区别就在与接收参数的方式。</p>\n<p><code>apply()</code> 方法接收两个参数，一个是在其中运行函数的作用域，函数中的 <code>this</code> 的值，另一个是参数数组。\n而 <code>call()</code> 方法的第一个参数跟 <code>apply()</code> 相同，不同的是除了第一个参数，后面的其他参数将会直接传递给函数。</p>\n<!--more-->\n<pre><code>function sum(num1, num2) {\n  return num1 + num2;\n}\n\n// 使用 apply()\nfunction applySum(num1, num2) {\n  return sum.apply(this, arguments);\n}\n\n// 使用 call()\nfunction callSum(num1, num2) {\n  return sum.call(this, num1, num2);\n}\n\nalert(applySum(1, 2)); // 3\nalert(callSum(1, 2)); // 3\n</code></pre>\n<p>这里使用 <code>apply()</code> 与 <code>call()</code> 的效果都是一样的，不同的只是除了 <code>this</code> 的指向之外的参数的传递形式不同。在不给函数传递参数的时候则完全一样，当不知道需要传递的函数参数的个数时，使用 <code>apply()</code> 更好。</p>\n<p>实际上 <code>apply()</code> 与 <code>call()</code> 的用法并不只是这些。他们可以扩充函数赖以运行的作用域，即可以改变函数运行时的上下文。</p>\n<pre><code>name = \"unknown\";\nvar person = {\n  name = \"ahonn\";\n}\n\nfunction sayName() {\n  console.log(this.name);\n}\n\nsayName() // unknown\n// 函数中的 this 为全局环境\nsayName.apply(this); // unknown\n// 函数中的 this 指向了 person\nsayName.apply(person) // ahonn\n</code></pre>\n<p>上面的例子中的 <code>apply()</code> 换成 <code>call()</code> 的话效果相同，因为我这样只给 <code>apply()</code> 传了第一个参数。</p>\n<h2>bind()</h2>\n<p><code>bind()</code> 方法与 <code>apply()</code> 和 <code>call()</code> 相似，同样是可以改变函数内 this 的指向。但与 <code>apply()</code>, <code>call()</code> 不同的是，<code>bind()</code> 方法会创建一个新函数，称为绑定函数，当调用绑定函数时，函数会以创建时的第一个参数 this 作为函数运行的作用域。</p>\n<pre><code>name = \"unknown\";\nvar person = {\n  name = \"ahonn\";\n}\n\nfunction sayName() {\n  console.log(this.name);\n}\n\nvar sayAhonnName = sayName.bind(person);\n\n// 函数中的 this 指向 person\nsayAhonnName() // ahonn\n</code></pre>\n<p>也就是说，<code>bind()</code> 方法可以绑定一个上下文到函数中，产生一个新的绑定函数。这样就可以在需要的时候去运行有指定 this 对象的函数。</p>\n<p>使用变量保存 this 的做法：</p>\n<pre><code>var foo = {\n  bar: 1,\n  eventBind: function() {\n    var _this = this;\n    $('.someClass').on('click', function(event) {\n      console.log(_this.bar);\n    });\n  }\n}\n</code></pre>\n<p>因为在 JavaScript 中函数也是对象，使用如果不使用 <code>_this</code> 来保存上下文环境的话，在绑定的事件函数中将找不到 <code>bar</code> 这个值，因为上下文环境发生了改变。更优雅的做法就是使用 <code>bind()</code> 来完成。</p>\n<pre><code>var foo = {\n    bar : 1,\n    eventBind: function(){\n        $('.someClass').on('click',function(event) {\n            console.log(this.bar);\n        }.bind(this));\n    }\n}\n</code></pre>\n<p>这样就把 <code>$('.someClass').on('click',function(event) {}</code> 外的上下文环境给绑定到了函数内了。</p>","rawMarkdownBody":"\n最近在看 《JavaScript 高级程序设计》，也就是所谓的高程3。正好看到 `Function` 部分，看到了几个熟悉的字眼，`apply()`，`call()` 和 `bind()`。好像是有些面试题里面有，遂搞清楚了记录下。\n\n## apply() 与 call()\n\n每个函数都包含两个非继承的方法：`apply()` 和 `call()`。两个方法的用途都是在特定的作用域中调用函数，实际上等于设置函数体内 `this` 对象的值。这是书中的说法，大概意思就是 `apply()` 和 `call()` 这两个方法是用来改变函数中 `this` 的指向的。而 `apply()` 与 `call()` 的区别就在与接收参数的方式。\n\n`apply()` 方法接收两个参数，一个是在其中运行函数的作用域，函数中的 `this` 的值，另一个是参数数组。\n而 `call()` 方法的第一个参数跟 `apply()` 相同，不同的是除了第一个参数，后面的其他参数将会直接传递给函数。\n\n<!--more-->\n```\nfunction sum(num1, num2) {\n  return num1 + num2;\n}\n\n// 使用 apply()\nfunction applySum(num1, num2) {\n  return sum.apply(this, arguments);\n}\n\n// 使用 call()\nfunction callSum(num1, num2) {\n  return sum.call(this, num1, num2);\n}\n\nalert(applySum(1, 2)); // 3\nalert(callSum(1, 2)); // 3\n```\n\n这里使用 `apply()` 与 `call()` 的效果都是一样的，不同的只是除了 `this` 的指向之外的参数的传递形式不同。在不给函数传递参数的时候则完全一样，当不知道需要传递的函数参数的个数时，使用 `apply()` 更好。\n\n实际上 `apply()` 与 `call()` 的用法并不只是这些。他们可以扩充函数赖以运行的作用域，即可以改变函数运行时的上下文。\n\n```\nname = \"unknown\";\nvar person = {\n  name = \"ahonn\";\n}\n\nfunction sayName() {\n  console.log(this.name);\n}\n\nsayName() // unknown\n// 函数中的 this 为全局环境\nsayName.apply(this); // unknown\n// 函数中的 this 指向了 person\nsayName.apply(person) // ahonn\n```\n\n上面的例子中的 `apply()` 换成 `call()` 的话效果相同，因为我这样只给 `apply()` 传了第一个参数。\n\n## bind()\n`bind()` 方法与 `apply()` 和 `call()` 相似，同样是可以改变函数内 this 的指向。但与 `apply()`, `call()` 不同的是，`bind()` 方法会创建一个新函数，称为绑定函数，当调用绑定函数时，函数会以创建时的第一个参数 this 作为函数运行的作用域。\n\n```\nname = \"unknown\";\nvar person = {\n  name = \"ahonn\";\n}\n\nfunction sayName() {\n  console.log(this.name);\n}\n\nvar sayAhonnName = sayName.bind(person);\n\n// 函数中的 this 指向 person\nsayAhonnName() // ahonn\n```\n\n也就是说，`bind()` 方法可以绑定一个上下文到函数中，产生一个新的绑定函数。这样就可以在需要的时候去运行有指定 this 对象的函数。\n\n使用变量保存 this 的做法：\n```\nvar foo = {\n  bar: 1,\n  eventBind: function() {\n    var _this = this;\n    $('.someClass').on('click', function(event) {\n      console.log(_this.bar);\n    });\n  }\n}\n```\n\n因为在 JavaScript 中函数也是对象，使用如果不使用 `_this` 来保存上下文环境的话，在绑定的事件函数中将找不到 `bar` 这个值，因为上下文环境发生了改变。更优雅的做法就是使用 `bind()` 来完成。\n\n```\nvar foo = {\n    bar : 1,\n    eventBind: function(){\n        $('.someClass').on('click',function(event) {\n            console.log(this.bar);\n        }.bind(this));\n    }\n}\n```\n\n这样就把 `$('.someClass').on('click',function(event) {}` 外的上下文环境给绑定到了函数内了。\n","frontmatter":{"title":"apply, call 与 bind 的区别","date":"2016年3月20日","tags":["JavaScript","前端"]}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/javascript-apply-call-and-bind/"}}}