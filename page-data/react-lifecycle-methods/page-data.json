{"componentChunkName":"component---src-templates-post-tsx","path":"/react-lifecycle-methods/","result":{"data":{"markdownRemark":{"html":"<p>生命周期函数是指，在组件生命周期上的特定点上执行的各个函数。\nReact 的组件声明周期函数分为三种：挂载，更新以及卸载。</p>\n<h2>挂载</h2>\n<p>组件挂载的生命周期函数都在初始化渲染前后被调用。</p>\n<h3>componentWillMount</h3>\n<p>只调用一次，在客户端与服务端都执行。在初始化渲染之前被调用。</p>\n<!--more-->\n<h3>componentDidMount</h3>\n<p>只调用一次，在客户端执行，不在服务端执行。在初始化渲染之后被调用。\n使用 <code>setTimeout</code> 或 <code>setInterval</code>, Ajax 请求等这些操作，均在这个方法内。</p>\n<h2>更新</h2>\n<p>所有组件更新的生命周期函数都不会在初始化渲染被调用。</p>\n<h3>componentWillReceiveProps</h3>\n<p>当组件收到新的 <code>props</code> 时被调用。不会在初始化渲染被调用。\n在这个函数里调用 <code>this.setState()</code>不会触发任何额外的渲染。（PS: 就是在这里被坑了 T-T）</p>\n<blockquote>\n<p> 如果需要实现一个对 state 变化相应的操作，使用 <a href=\"#componentWillUpdate\">componentWillUpdate</a></p>\n</blockquote>\n<h3>shouldComponentUpdate</h3>\n<p>当新的 <code>props</code> 或者 <code>state</code> 被收到，在渲染前被调用。不会在初始化渲染时被调用。\n如果 <code>shouldComponentUpdate</code> 返回 <code>false</code>，<code>render()</code> 会在下次 <code>state</code> 变化前被完全跳过。<a href=\"#componentWillUpdate\">componentWillUpdate</a>  和 <a href=\"#componentDidUpdate\">componentDidUpdate</a>  将不会被调用。</p>\n<h3>componentWillUpdate</h3>\n<p>当新的 <code>props</code> 或者 <code>state</code> 被收到，在渲染前被立即调用。不会在初始化渲染被调用。\n<strong>不能在这个方法里使用 <code>this.setState()</code>。</strong></p>\n<h3>componentDidUpdate</h3>\n<p>在组件的更新被更新到 DOM 后立即被调用。不会在初始化渲染被调用。</p>\n<h2>卸载</h2>\n<h3>componentWillUnmount</h3>\n<p>在组件卸载前被调用，主要用来执行一些组件的清理工作。</p>","rawMarkdownBody":"\n生命周期函数是指，在组件生命周期上的特定点上执行的各个函数。\nReact 的组件声明周期函数分为三种：挂载，更新以及卸载。\n\n## 挂载\n组件挂载的生命周期函数都在初始化渲染前后被调用。\n\n### componentWillMount\n只调用一次，在客户端与服务端都执行。在初始化渲染之前被调用。\n\n<!--more-->\n\n### componentDidMount\n只调用一次，在客户端执行，不在服务端执行。在初始化渲染之后被调用。\n使用 `setTimeout` 或 `setInterval`, Ajax 请求等这些操作，均在这个方法内。\n\n## 更新\n所有组件更新的生命周期函数都不会在初始化渲染被调用。\n\n### componentWillReceiveProps\n当组件收到新的 `props` 时被调用。不会在初始化渲染被调用。\n在这个函数里调用 `this.setState() `不会触发任何额外的渲染。（PS: 就是在这里被坑了 T-T）\n\n>  如果需要实现一个对 state 变化相应的操作，使用 [componentWillUpdate](#componentWillUpdate)\n\n### shouldComponentUpdate\n\n当新的 `props` 或者 `state` 被收到，在渲染前被调用。不会在初始化渲染时被调用。\n如果 `shouldComponentUpdate` 返回 `false`，`render()` 会在下次 `state` 变化前被完全跳过。[componentWillUpdate](#componentWillUpdate)  和 [componentDidUpdate](#componentDidUpdate)  将不会被调用。\n\n### componentWillUpdate\n当新的 `props` 或者 `state` 被收到，在渲染前被立即调用。不会在初始化渲染被调用。\n**不能在这个方法里使用 `this.setState() `。**\n\n### componentDidUpdate\n在组件的更新被更新到 DOM 后立即被调用。不会在初始化渲染被调用。\n\n## 卸载\n\n### componentWillUnmount\n在组件卸载前被调用，主要用来执行一些组件的清理工作。\n","frontmatter":{"title":"React 生命周期函数小结","date":"2016年10月2日","tags":["JavaScript","前端","React"]}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/react-lifecycle-methods/"}}}