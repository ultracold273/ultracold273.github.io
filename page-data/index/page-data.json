{"componentChunkName":"component---src-pages-index-tsx","path":"/","result":{"data":{"allMarkdownRemark":{"edges":[{"node":{"id":"8de95af7-f50d-5649-8365-ff5d6f8f59a3","excerpt":"About me Bio I obtained my Ph.D degree in Computer Science and Engineering from the Chinese University of Hong Kong (CUHK) in 2018. My major…","fields":{"slug":"/about-me/"},"frontmatter":{"date":"2019年11月30日","tags":["Hidden"],"title":"关于我"}}},{"node":{"id":"c528962c-b8e4-533d-8b4b-e183c7eb9d8a","excerpt":"一眨眼 8102 年都快结束了，年终总结也拖了好几天。今天晚上终于可以静下心来写一写了。 先看一下去年立下的 KPI 完成了多少... 2018 checklist…","fields":{"slug":"/summary-of-2018/"},"frontmatter":{"date":"2018年12月30日","tags":["年终总结"],"title":"2018年终总结"}}},{"node":{"id":"647d81b5-fb1c-51de-87d5-4b0baed99c74","excerpt":"最近在开发中使用了 moment(string).isValid() 去判断字符串是否为日期格式字符串。发现当字符串为 xxxx-1 时，在 Chrome 中 moment('test-1').isValid() 返回值为 true, 而当字符串为 test…","fields":{"slug":"/date-in-different-browsers/"},"frontmatter":{"date":"2018年11月17日","tags":["JavaScript","前端"],"title":"new Date(string) 在不同浏览器中的不同表现"}}},{"node":{"id":"f9441aee-8372-5ff7-afbf-0507f33bdc61","excerpt":"本文为 JS 函数式编程指南  笔记 函数是一等公民 当我们说函数是“一等公民”的时候，我们实际上说的是它们跟其他对象都一样，你可以像对待其他数据结构一样对待它们。 纯函数 相同的输入产生相同的输出，并且没有副作用，即为纯函数。例如 Array.prototype.slice…","fields":{"slug":"/javascript-functional-programming-notes/"},"frontmatter":{"date":"2018年9月15日","tags":["JavaScript","FP"],"title":"JavaScript 函数式编程笔记"}}},{"node":{"id":"15e1ce6e-e6bc-5ba2-bda3-2c8b656baff6","excerpt":"…","fields":{"slug":"/my-2017/"},"frontmatter":{"date":"2017年12月29日","tags":["年终总结"],"title":"2017年终总结"}}},{"node":{"id":"c2fad3b5-928d-5e07-9b51-89e36e490db6","excerpt":"昨天乱搞把电脑搞炸了，然后又误操作把系统格掉了。悲剧.. 除了在 Github…","fields":{"slug":"/starting-from-scratch-mac/"},"frontmatter":{"date":"2017年8月31日","tags":["MacOS"],"title":"从零开始的 Mac"}}},{"node":{"id":"2587d154-807e-5a4a-958e-9df459951794","excerpt":"最近在搞一个 Sass 文件的编译插件，主要使用 node-sass 来进行编译，在这过程中遇到一个蛮坑的小问题。 在不压缩的情况下使用 node-sass…","fields":{"slug":"/the-evil-of-the-BOM-ufeff-and-i»¿/"},"frontmatter":{"date":"2017年7月24日","tags":["CSS","前端"],"title":"万恶的BOM：ï»¿ 与 \\ufeff"}}},{"node":{"id":"540a5a2b-1216-5c40-bb9b-496b99c92f53","excerpt":"三大原则 单一数据源（store） state 只可读（只能通过 Reducer 生成新 State） 使用纯函数执行修改（Reducer 必须为纯函数，无副作用） 单向数据流 dispatch 触发 action 传递数据，但应该尽量减少传递的数据 如果有 middleware…","fields":{"slug":"/redux-source-code-insight/"},"frontmatter":{"date":"2017年7月4日","tags":["Redux","React","JavaScript"],"title":"Redux 源码解析"}}},{"node":{"id":"e694c055-993b-50dd-aec5-f0a977b96c94","excerpt":"这两天一直在看文档看源码，Vim 上用的 Ack.vim 做全局搜索，但是用起来蛮难用的。 经过一番搜索，找到了国人写的全局搜索的插件：ctrlsf.vim，经过配置之后用了起来，感觉蛮好用的。 具体效果可以查看 ctrlsf.vim 安装 ctrlsf 是依赖 ack/ag…","fields":{"slug":"/vim-plugin-ctrlsf/"},"frontmatter":{"date":"2017年6月29日","tags":["Vim"],"title":"Vim 全局搜索插件：ctrlsf.vim"}}},{"node":{"id":"44911f6a-d86f-5d7e-9266-573aa4a05b15","excerpt":"该文章将阅读 React 初始化渲染相关的代码，并实现一个简单的将 JSX 渲染到页面的功能。（不包括组件生命周期与事件处理相关部分） 源码解析：渲染过程 JSX 解析 我们知道在 React 组件render() 返回的是 JSX，而 JSX 将会被 babel 转换。JSX…","fields":{"slug":"/write-a-react-from-scratch-init-render/"},"frontmatter":{"date":"2017年6月8日","tags":["React","JavaScript","前端"],"title":"React 初始化渲染"}}},{"node":{"id":"5347842b-1898-5eea-ab5f-ede7c0fc7050","excerpt":"源码结构 Koa 的源码中主要为 lib 目录下的 application.js、context.js、request.js 与 response.js 文件 application.js: 框架入口，导出 Application 类，即使用时导入的 Koa 类 context…","fields":{"slug":"/koa2-analysis/"},"frontmatter":{"date":"2017年5月17日","tags":["Koa","Node.js"],"title":"Koa2 源码分析"}}},{"node":{"id":"7a4d9142-65c6-5bc1-9818-adc706ad9564","excerpt":"很久之前就听说过 Neovim，但一直没有怎么了解过。昨天下午折腾了一下，彻底转投 Neovim 了。 虽然说这两货的差别目前还不是很大，但是 Neovim 实现了嵌入式终端模拟器，Excited! 各种 REPL 插件统统都可以卸载了！ 迁移配置文件 Neovim…","fields":{"slug":"/use-neovim/"},"frontmatter":{"date":"2017年3月27日","tags":["Vim"],"title":"转投 Neovim"}}},{"node":{"id":"21df3e8f-005f-5c2e-8bb2-a3820cef7e31","excerpt":"2月末的时候，通过 simplyY 内推了阿里巴巴暑期实习的前端开发岗，在此表示感谢。\n接着3月1号收到了内推的通知邮件，完善信息后很快就接到了一面的电话（3月3号）。 一面 面试了大概2…","fields":{"slug":"/alibaba-summer-internship-interview-summary/"},"frontmatter":{"date":"2017年3月16日","tags":["前端","面试"],"title":"阿里巴巴暑假实习面试总结"}}},{"node":{"id":"b962f1e9-14ff-5c06-b1fb-1b2b3ca030ba","excerpt":"答 中级前端工程师面试 我想问的几个问题 中的几个问题，感谢 @SimplyY…","fields":{"slug":"/answer-front-end-questions/"},"frontmatter":{"date":"2017年3月11日","tags":["前端","面试"],"title":"答前端面试题"}}},{"node":{"id":"3b5d3dc6-ecf1-584d-ae87-dff6c8917747","excerpt":"AJAX即“Asynchronous JavaScript and XML”（异步的JavaScript与XML技术），指的是一套综合了多项技术的浏览器端网页开发技术。 Ajax 技术的核心是 XMLHttpRequest 对象，起初 IE…","fields":{"slug":"/xmlhttprequest-study-notes/"},"frontmatter":{"date":"2017年3月2日","tags":["JavaScript","前端"],"title":"XMLHttpRequest 学习笔记"}}},{"node":{"id":"c7c04dfe-8d9c-5d44-b2e6-651424a7f2dd","excerpt":"昨天在微信读书上面看到了池建强的《MacTalk 人生元编程》，然后花了差不多一天看完，其中有篇有关于 Vim…","fields":{"slug":"/notes-of-vim/"},"frontmatter":{"date":"2017年2月19日","tags":["Vim"],"title":"Vim 折腾记"}}},{"node":{"id":"3792b308-8fda-5616-bd5c-f548c362ee29","excerpt":"众所周知，JavaScript 的继承是实现继承，而没有 Java 中的接口继承。这是因为 JavaScript 中函数没有签名，而实现继承依靠的是原型链来实现的。 原型链继承 JavaScript…","fields":{"slug":"/something-about-javaScript-inherit/"},"frontmatter":{"date":"2017年1月24日","tags":["JavaScript","前端"],"title":"JavaScript 继承的那些事"}}},{"node":{"id":"4826ce18-8c93-5b70-adc1-079e34056c8f","excerpt":"写在前面 本文将会从零开始开发一个简单的博客主题。样式主要参考 Hexo theme 中的 Noise 主题。 开始之前你需要了解： 模板引擎 CSS预处理器 Hexo 文档 本文使用的模板引擎为 ejs，使用的 CSS 预处理器为 stylus。这也是 hexo…","fields":{"slug":"/create-a-hexo-theme-from-scratch/"},"frontmatter":{"date":"2016年12月15日","tags":["Hexo","前端"],"title":"从零开始制作 Hexo 主题"}}},{"node":{"id":"d3660c79-712c-572a-b45a-0bb5f461e265","excerpt":"一转眼 2016 年就快要结束了，这一年对自己来说收获了很多。 去年的总结，给自己定下了个 2016 年的计划。现在 2016 也差不多快结束了，我对自己执行的情况还是比较满意的。 关于 Github 去年年底参加了 Github 上的一个编程马拉松，一开始 commit…","fields":{"slug":"/2016-summary/"},"frontmatter":{"date":"2016年12月13日","tags":["年终总结"],"title":"2016 年终总结"}}},{"node":{"id":"ddb2369a-37b8-52e9-802a-700cf0eca657","excerpt":"工厂模式 在函数中创建 Object 对象，并为对象添加属性。函数返回添加属性之后的对象。 但工厂模式产生的对象依旧为 Object…","fields":{"slug":"/some-ways-of-javascript-create-object/"},"frontmatter":{"date":"2016年11月30日","tags":["JavaScript","前端"],"title":"JavaScript 创建对象的一些姿势"}}},{"node":{"id":"b80f76da-c71f-5a50-aa82-6bae18756221","excerpt":"最近开始读之前没有读完的 underscore 的源码，刚把 Object 部分读完。对 JavaScript 中类型判断部分的总结。 Object.prototype.toString() 在进行类型判断时，使用到最多的当属 Object.prototype.toString…","fields":{"slug":"/javascript-data-type-judgment/"},"frontmatter":{"date":"2016年11月21日","tags":["JavaScript","前端"],"title":"JavaScript 数据类型判断"}}},{"node":{"id":"70af4d4f-dc38-5126-a742-a0a668d0dfb7","excerpt":"前段时间去了广州参加了关于「微信小程序」的技术沙龙，整场下来收获颇多。实际上微信小程序刚刚发布出来的时候就关注，弄了破解了的开发工具，跑了个官方的 Demo。 听完回来之后就想着挖个相关的坑，正好看到手机上的 「ONE · 一个」。上网找到了 ONE…","fields":{"slug":"/wechat-app-summary/"},"frontmatter":{"date":"2016年11月14日","tags":["JavaScript","Wechat"],"title":"「微信小程序」入坑总结"}}},{"node":{"id":"d95af61c-ae6d-5401-a484-8e6cfc391470","excerpt":"在 React 组件间进行页面跳转后，发现页面的位置并不在页面顶部，而是在页面跳转前的位置。就是说浏览器的滚动条并没有回到顶部的位置。 经过搜索之后找到了解决方案：Scroll to the top of the page after render in react.js…","fields":{"slug":"/after-the-react-routing-scroll-to-the-top-of-the-page/"},"frontmatter":{"date":"2016年10月11日","tags":["React","前端","JavaScript"],"title":"React 路由跳转后回到页面顶部"}}},{"node":{"id":"a71514d3-3a44-596c-8677-e625a83dbf29","excerpt":"生命周期函数是指，在组件生命周期上的特定点上执行的各个函数。\nReact 的组件声明周期函数分为三种：挂载，更新以及卸载。 挂载 组件挂载的生命周期函数都在初始化渲染前后被调用。 componentWillMount…","fields":{"slug":"/react-lifecycle-methods/"},"frontmatter":{"date":"2016年10月2日","tags":["JavaScript","前端","React"],"title":"React 生命周期函数小结"}}},{"node":{"id":"ae2c7f7f-4591-5799-90f2-1286bb2f10ae","excerpt":"JavaScript 创建正则表达式有两种方式： 使用正则表达式字面量：var re = /abc/; 调用 RegExp 对象的构造函数：var re = new RegExp(\"abc…","fields":{"slug":"/the-memo-of-javascript-regexp/"},"frontmatter":{"date":"2016年9月13日","tags":["JavaScript","前端","RegExp"],"title":"正则表达式备忘录"}}},{"node":{"id":"dfcba90d-6b12-5ae1-8d21-89670a8127a1","excerpt":"翻译自：JavaScript Best Practices: Tips & Tricks to Level Up Your Code\n没有严格的按照原文翻译，删减修改了部分内容。 在这个教程中，会列出一些重要的 JavaScript…","fields":{"slug":"/javascript-best-practices/"},"frontmatter":{"date":"2016年8月31日","tags":["JavaScript","前端"],"title":"JavaScript 最佳实践"}}},{"node":{"id":"f9379bb8-2940-5317-a095-c907a3c990ee","excerpt":"什么是浏览器回流 浏览器在显示网页时，需要计算每一个元素应该放置的位置，这个计算过程就称为浏览器回流（browser reflow）。回流会重新计算页面的布局，在回流中会重新计算元素的尺寸与位置，并且也会触发对子元素的回流。 触发浏览器回流的操作： 在 DOM…","fields":{"slug":"/javascript-reduce-the-browser-reflow/"},"frontmatter":{"date":"2016年8月2日","tags":["JavaScript","前端"],"title":"如何减少浏览器回流"}}},{"node":{"id":"94c0a8f1-6f16-50ba-a448-7bc6fdac9b5f","excerpt":"在 underscore 中有一个函数，其作用是将数组乱序排序，实现如下： 其中使用的数组乱序的算法是 Fisher–Yates shuffle。这是一个 O(n) 复杂度的随机排列数组元素的经典算法。 每次循环从前面的 index 个元素中随机选择一个元素 shuffle…","fields":{"slug":"/the-right-way-to-array-of-random-sequence/"},"frontmatter":{"date":"2016年7月25日","tags":["JavaScript","前端","Underscore"],"title":"数组乱序的正确姿势"}}},{"node":{"id":"c3e89ea6-7d72-5bf8-ac19-c3afb5960ce0","excerpt":"今天遇到一个问题：在使用 vue 的练手项目中，渲染的 HTML 里 <code> 标签中的代码没有代码高亮。 遂想到用 highlight.js 来解决，按照平常那样在 HTML 文件中引入 js 和 css 文件，然后在<header> 中加上一句 <script>hljs…","fields":{"slug":"/getting-highlightjs-to-work-with-vue.js/"},"frontmatter":{"date":"2016年7月13日","tags":["Vue","前端"],"title":"Vue 中使用 highlight.js"}}},{"node":{"id":"add0c54f-ca68-5d56-a4a1-a5fd130694c8","excerpt":"我们有这样一个结构的 HTML： 如果我们要实现 .children 在 .parent 中垂直居中。 通常第一印象会想起给父元素设置相对定位，给子元素设置绝对定位。这样子元素就相对于父元素定位，再通过 top 与 left 各偏移 50% 父元素宽度，使用 margin…","fields":{"slug":"/vertical-center-for-css/"},"frontmatter":{"date":"2016年6月29日","tags":["CSS","前端"],"title":"CSS 实现垂直居中"}}},{"node":{"id":"beec11b7-0727-56b5-b1f6-e130d6d0c9c5","excerpt":"为什么学 Sass 说起来其实很早就知道 Sass 这东西。刚开始写 Even 这个博客主题的时候就有在考虑是要用 Less 还是Sass，最后用了变量名用 @ 开头的 Less（可能是 PHP 的原因，对 $ 开头的变量名没什么好感）。 最近正在看 Foundation…","fields":{"slug":"/sass-preliminary-study/"},"frontmatter":{"date":"2016年6月7日","tags":["CSS","Sass"],"title":"Sass 初探"}}},{"node":{"id":"f169d770-05c6-521b-a2b0-402e67bc089a","excerpt":"Nokogiri 是 Ruby 的一个 HTML/XML 文件的解析库。在需要解析 HTML/XML 文件获取数据时，它是一个很好的选择。 解析 HTML 文档 使用 Nokogiri 解析 HTML 将会生成 Nokogiri documens…","fields":{"slug":"/using-nokogiri-parsing-html/"},"frontmatter":{"date":"2016年5月28日","tags":["Ruby"],"title":"使用 Nokogiri 解析 HTML"}}},{"node":{"id":"fd647706-33f1-5325-abae-e8cc6011b6b1","excerpt":"步骤 使用 JavaScript 实现拖拽的步骤： 让元素捕获事件（mousedown, mousemove & mouseup） 单击并不释放，触发 mousedown，标记开始拖拽，并获取元素和鼠标的位置 拖动鼠标，触发 mousemove…","fields":{"slug":"/use-javascript-to-achieve-simple-drag-and-drop/"},"frontmatter":{"date":"2016年5月14日","tags":["JavaScript","前端"],"title":"使用 JavaScript 实现简单的拖拽"}}},{"node":{"id":"b64d7d9a-a56d-5c37-b30e-fedd9424a416","excerpt":"记录第一次面试 流水账 想到什么写什么 第一次正正经经的去面试，虽然只是个软件开发暑期实习生。 刚开始是在网上无聊的逛 V2EX 什么的，然后看了看 conde 社区。后来神不知鬼不觉的不知道为什么就跑到了 Ruby China…","fields":{"slug":"/the-first-interview/"},"frontmatter":{"date":"2016年5月14日","tags":["面试"],"title":"记第一次面试"}}},{"node":{"id":"999088e7-240b-5582-b824-d88f14616983","excerpt":"optimizeCb 在 underscore 中的内部函数 optimizeCb，顾名思义就是 optimize callback，即优化回调函数。 optimizeCb: 它是这样处理回调的，当回调函数指定上下文环境时，根据 argCount 来分情况使用 call…","fields":{"slug":"/starting-from-the-optimizeCb/"},"frontmatter":{"date":"2016年5月3日","tags":["JavaScript","前端","Underscore"],"title":"从 optimizeCb 说起"}}},{"node":{"id":"5ec5b0c1-3dbf-50a8-be64-9194b05358ef","excerpt":"变量提升 合乎常理的预期 按照合乎常理的预期，程序应该是由上至下一行一行执行的，如果使用了之前没有定义的变量的话，正确的反应应该是会报错，就象下面这段 C++ 代码： 并不完全正确 实际上合乎常理的预期并不是“完全正确”的，在 JavaScript…","fields":{"slug":"/javascript-hoisting/"},"frontmatter":{"date":"2016年4月28日","tags":["JavaScript","前端"],"title":"不合常理的变量提升"}}},{"node":{"id":"532795bf-875a-5fab-8cfb-ca6551f4765f","excerpt":"事件流 事件流描述的是从页面中接收事件的顺序。在 JavaScript 中事件流有两种，一种是由 IE 开发团队提出的事件冒泡流，而另一种是 Netscape 提出的事件捕获流。 事件冒泡 事件冒泡流，即事件开始时由具体的元素接收，然后逐级向上传播，直到 document…","fields":{"slug":"/javascript-event-stream/"},"frontmatter":{"date":"2016年4月16日","tags":["JavaScript","前端"],"title":"事件流：冒泡与捕获"}}},{"node":{"id":"fbf8d2c6-c205-5643-b14b-3e65e1fabf14","excerpt":"作用域 在 JavaScript 中变量的作用域与其他语言不同，JavaScript 的作用域不是由 {} 来界定，而是函数。所以循环实际上是在全局作用域中。 全局变量 & 局部变量 JavaScript 变量的作用域分为两种，全局和局部。 在 JavaScript…","fields":{"slug":"/javascript-closures/"},"frontmatter":{"date":"2016年4月4日","tags":["JavaScript","前端"],"title":"JavaScript 作用域与闭包"}}},{"node":{"id":"2c8c05e2-ec95-5d62-89b4-6deeacf94b0d","excerpt":"在 JavaScript 中一切皆为对象（Object），但是却与 Java，C++ 等语言不同，没有“类”的概念，也没有所谓的“子类”和“父类”。JavaScript 中的对象是基于原型（prototype）来实现面向对象的，靠奇怪的原型链（prototype chain…","fields":{"slug":"/javascript-prototype-chain/"},"frontmatter":{"date":"2016年3月29日","tags":["JavaScript","前端"],"title":"奇怪的 JavaScript 原型链"}}},{"node":{"id":"cdd5c558-bb3a-5cce-bad1-02cedf9db960","excerpt":"最近在看 《JavaScript 高级程序设计》，也就是所谓的高程3。正好看到 Function 部分，看到了几个熟悉的字眼，apply()，call() 和 bind()。好像是有些面试题里面有，遂搞清楚了记录下。 apply() 与 call…","fields":{"slug":"/javascript-apply-call-and-bind/"},"frontmatter":{"date":"2016年3月20日","tags":["JavaScript","前端"],"title":"apply, call 与 bind 的区别"}}},{"node":{"id":"b5af37a0-df5a-5204-849f-6fc5ddb3a46e","excerpt":"最近在改一个 Hexo 的主题 apollo。然后看到这个主题用的是叫做 Jade 的模版引擎写的。之前了解过几个模版引擎 ejs，swig 什么的，但是这些都是在原有的 HTML 中插标签，看起来有点乱。看到 Jade 后就深深的被它那如同 Python…","fields":{"slug":"/jade-template-engine/"},"frontmatter":{"date":"2016年2月29日","tags":["Jade","前端"],"title":"Jade 模板引擎"}}},{"node":{"id":"be4627b0-a42c-52f0-a80e-4319dbb8588e","excerpt":"这两天在写 Nada 的下载功能，遇到一个问题，在下载歌曲的时候整个界面都会卡住，必须等待下载完成才能够恢复，因为写的时候是直接顺序执行的，没有多线程。之前在写播放功能的时候是参考了别人的代码，自己其实对多线程部分不是很了解。然后趁着晚上了解一下 Python 的 thread…","fields":{"slug":"/python-multithreaded-preliminary/"},"frontmatter":{"date":"2016年2月20日","tags":["Python"],"title":"Python 多线程初步了解"}}},{"node":{"id":"b896ec37-baf0-5790-9695-bcc333a0a8a4","excerpt":"Python 中的 curses 模块封装了 C 语言的 curses。curses 是一个能够提供基于文本终端窗口功能的动态库。它可以创建和管理一个窗口，使用8中不同的颜色，提供鼠标以及键盘支持。与 Tkinter 不同的是 curses 是基于终端的。 curses…","fields":{"slug":"/python-curses-module/"},"frontmatter":{"date":"2016年1月23日","tags":["Python"],"title":"Python curses 模块"}}},{"node":{"id":"119bb745-06e6-5110-b05c-db4aa5181a5e","excerpt":"记录 2015，计划 2016 关于生活 对2015 年的春节并没什么印象，现在也想不起来那时候在做什么了。大概是在游戏中度日吧，回想那段日子，现在还真是觉得那时候在浪费时间呢。 接着呢就是大一的第二个学期的到来。数据结构，对这门课还挺感兴趣呢，学起来也觉得还 ok。大概在…","fields":{"slug":"/2015-summary/"},"frontmatter":{"date":"2015年12月31日","tags":["年终总结"],"title":"2015 总结"}}},{"node":{"id":"6123a703-b935-568d-93dd-083da8b7744b","excerpt":"翻译自 Stack Overflow: How can I prevent SQL-injection in PHP? 中的高票答案 Question 如果用户输入的数据没有经过修正，那么应用将会很容易受到 SQL…","fields":{"slug":"/how-can-i-prevent-sql-injection-in-php/"},"frontmatter":{"date":"2015年12月21日","tags":["PHP","SQL"],"title":"在 PHP 中如何预防 SQL 注入"}}},{"node":{"id":"38fa967e-f4a3-58a6-ad8d-0e06853acd7e","excerpt":"之前写 PHP 的爬虫的时候就有用到 cURl 扩展，然后前几天在写 zhihu-php 的时候也用到了这个，也觉得这个也是用得比较多的一个东西，所以就上网又学习了一下，就顺手把它写下来了。 cURL 是一个功能强大的库，支持很多不同的协议、选项，能提供 URL…","fields":{"slug":"/simple-use-of-the-php-curl-library/"},"frontmatter":{"date":"2015年12月19日","tags":["PHP"],"title":"PHP cURL 库的简单使用"}}},{"node":{"id":"330df9d8-0263-529d-9782-fa39a55bb4b0","excerpt":"根据极客学院的Python爬虫教程写的一个单线程简易爬虫。可以监控知乎用户动态，当有新动态时发送邮件通知。 步骤 根据要关注的知乎用户的主页URL，使用requests模块获取整个用户主页的html。 根据用户主页及其html…","fields":{"slug":"/the-crawler-of-zhihu-user-dynamic-monitoring/"},"frontmatter":{"date":"2015年11月25日","tags":["Python","知乎"],"title":"知乎用户动态监控爬虫"}}},{"node":{"id":"1bab84ed-087d-5d6e-b358-b378bffe2903","excerpt":"记录，以便下次所需。 今天重装了腾讯云上面的服务器，安装的是Ubuntu server 14.04。搞完apache2 + mysql + PHP 后，安装了phpmyadmin来作为数据库管理。\n登录之后发现报错：缺少 mcrypt 扩展。上网查了一下，发现需要安装php…","fields":{"slug":"/phpmyadmin-lack-mcrypt-extension/"},"frontmatter":{"date":"2015年11月22日","tags":["PHP","Ubuntu"],"title":"phpmyadmin 缺少 mcrypt 扩展"}}},{"node":{"id":"8224c440-5a79-5980-a1f0-616a518a4604","excerpt":"记录以避免再次犯错 前因 今天修改.bashrc中的环境配置时，不小心把$PATH删除了。后来发现后添加回去后Terminal中出现如下错误： 这是因为sudoers的权限不对而出现的问题。 后果 在网上搜索后知道了解决方法是进入ubuntu的recovery mode将/etc…","fields":{"slug":"/sudoers-is-world-writable/"},"frontmatter":{"date":"2015年8月30日","tags":["Linux"],"title":"sudoers is world writable"}}},{"node":{"id":"96c97035-4284-50c3-91fb-789086b70a7e","excerpt":"安装 安装apache2 安装php模块 安装Mysql 安装其他模块 测试Apache 浏览器访问 http://localhost/ 页面显示It Works！即为Apache服务器成功安装运行 修改权限 安装phpmyadmin 安装过程选择apache…","fields":{"slug":"/ubuntu-lamp-environment-set-up/"},"frontmatter":{"date":"2015年8月24日","tags":["Ubuntu","PHP"],"title":"Ubuntu 下 LAMP环境搭建"}}}]}},"pageContext":{"isCreatedByStatefulCreatePages":true}}}