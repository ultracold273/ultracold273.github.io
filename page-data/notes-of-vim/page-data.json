{"componentChunkName":"component---src-templates-post-tsx","path":"/notes-of-vim/","result":{"data":{"markdownRemark":{"html":"<p>昨天在微信读书上面看到了池建强的《MacTalk 人生元编程》，然后花了差不多一天看完，其中有篇有关于 Vim 的文章提起了我对这个编辑器的再一次兴趣（对的，我对它感兴趣很多次了，每次都懒..）。</p>\n<p>一直懒得去慢慢配置它，又不想用别人的配置。自己用的编辑器还是想自己折腾，然后今天就趁着我对这个还有点热度赶紧折腾起来。</p>\n<h2>MacVim</h2>\n<p>其实在命令行里面直接写代码还有有些不习惯的，所以选了 MacVim 这个 GUI 版本。这样又可以与其他编辑器一样单独打开，想小改代码的时候又可以直接打开命令行搞。</p>\n<p>在 MacTalk 的文章里面有提到 Vim 中文版本的<a href=\"http://sourceforge.net/projects/vimcdoc/files/latest/download\">帮助文档</a>，遂下载之。果然还是中文的比较浅显易懂。</p>\n<p>以前看别人的 <code>.vimrc</code> 配置，里面有些编辑器的基本配置，也不知道是哪里查的。原来这些配置可以在编辑器中输入 <code>:help options</code> 进行查看。</p>\n<!--more-->\n<h3>缩进</h3>\n<p>关于缩进的配置，主要设置了 <code>autoindent</code>, <code>smartindent</code> 和 <code>expandtab</code> 这三个选项。</p>\n<ul>\n<li><code>autoindent</code> 选项根据上一行决定新行的缩进</li>\n<li><code>smartindent</code> 选项智能自动缩进</li>\n<li><code>expandtab</code> 选项将 tab 转换为空格</li>\n</ul>\n<pre><code>set autoindent\nset smartindent\nset expandtab\n</code></pre>\n<h3>行号</h3>\n<p>显示行号是硬需求，但是与其他编辑器不同，在 vim 上还有相对行号。</p>\n<pre><code>set number\nset relativenumber\n</code></pre>\n<h2>插件</h2>\n<p>显而易见，手动安装 vim 插件是很麻烦很麻烦的。与 sublime text 之类的类似，vim 同样有类似的插件管理器 <a href=\"https://github.com/VundleVim/Vundle.vim\">Vundle</a>。</p>\n<p>创建文件夹 <code>~/.vim</code> 和配置文件 <code>~/.vimrc</code>，并安装 Vundle:</p>\n<pre><code class=\"language-bash\">$ git clone https://github.com/gmarik/vundle.git ~/.vim/bundle/vundle\n</code></pre>\n<p>为了方便管理再新建一个 <code>.vimrc.bundles</code> 来单独存放插件列表：</p>\n<pre><code>set nocompatible    \" be iMproved, required\nfiletype off        \" requried\nset rtp+=~/.vim/bundle/vundle/\n\ncall vundle#begin()\n\n\" Let Vundle manage Vundle\nBundle 'gmarik/vundle'\n\n\" .... 其他插件\n\ncall vundle#end()\n\" required\nfiletype plugin indent on\n</code></pre>\n<p>以后添加插件的时候只需要在这个文件里面添加一行：</p>\n<pre><code>Bundle 'xxx'\n</code></pre>\n<p>安装插件输入 <code>:BundleInstall</code> 命令即可，卸载插件时删除对应的配置并运行 <code>:BundleClean</code> 删除插件。</p>\n<h3>括号补全</h3>\n<p>第一次用的时候，输入 <code>(</code> 居然没有自己蹦出来另外一个 <code>)</code>。这不科学，讲道理这个是一定要的。</p>\n<p>发现很多人用的是 <a href=\"https://github.com/Raimondi/delimitMate\">delimitMate</a> ，添加 <code>Bundle 'delimitMate'</code> 到 <code>.vimrc.bundles</code>，运行 <code>BundleInstall</code>。</p>\n<p>安装完直接就可以自动补全括号了。</p>\n<h3>Emmet</h3>\n<p>很多浏览器都支持 Emmet 插件，vim 同样也有。但这个 Emmet 是第三方的，叫 <a href=\"https://github.com/mattn/emmet-vim/\">Emmet.vim</a>。</p>\n<p>安装完之后主要是设置一下出发的快捷键，默认的快捷键是 <code>Ctrl + y</code>。\n我把快捷键修改成 <code>Ctrl + e</code> 比较顺手。</p>\n<pre><code>\" Emmet.vim\nlet g:user_emmet_expandabbr_key = '&#x3C;c-e>'\n</code></pre>\n<h3>目录树</h3>\n<p>目录树就基本上也就是使用 <a href=\"https://github.com/scrooloose/nerdtree\">NERDTree</a>。</p>\n<p>开启目录树的快捷键修改为 <code>Ctrl + b</code>，然后当 vim 只剩目录树显示的时候自动退出。</p>\n<pre><code>\" NERDTree\nmap &#x3C;c-b> :NERDTreeToggle&#x3C;CR>\nautocmd vimenter * NERDTree\nautocmd bufenter * if (winnr(\"$\") == 1 &#x26;&#x26; exists(\"b:NERDTreeType\") &#x26;&#x26;b:NERDTreeType == \"primary\") | q | endif\n</code></pre>\n<h3>代码补全</h3>\n<p>补全用的就是大名鼎鼎的 <a href=\"https://github.com/Valloric/YouCompleteMe\">YouCompleteMe</a> 了。</p>\n<p>关于这个插件网上有很多插件，我就不啰嗦了。这里主要是抄的百度 EFE 的配置：</p>\n<pre><code>\" YouCompleteMe\n\" http://efe.baidu.com/blog/vim-javascript-completion/#youcompleteme\nlet g:ycm_min_num_of_chars_for_completion = 3\nlet g:ycm_autoclose_preview_window_after_completion=1\nlet g:ycm_complete_in_comments = 1\nlet g:ycm_key_list_select_completion = ['&#x3C;c-n>', '&#x3C;Down>']\nlet g:ycm_key_list_previous_completion = ['&#x3C;c-p>', '&#x3C;Up>']\n\" Use tab\nfunction! TabFunction ()\n    let line = getline('.')\n    let substr = strpart(line, -1, col('.')+1)\n    let substr = matchstr(substr, \"[^ \\t]*$\")\n    if strlen(substr) == 0\n        return \"\\&#x3C;tab>\"\n    endif\n    return pumvisible() ? \"\\&#x3C;c-n>\" : \"\\&#x3C;c-x>\\&#x3C;c-o>\"\nendfunction\ninoremap &#x3C;tab> &#x3C;c-r>=TabFunction()&#x3C;cr>\n\nlet g:ycm_semantic_triggers = {\n    \\   'css': [ 're!^\\s{2}', 're!:\\s+'],\n    \\   'html': [ '&#x3C;/' ],\n    \\ }\n</code></pre>\n<h2>总结</h2>\n<p>折腾了一下午，终于算是搞定了。其实过程还是蛮好玩的，有机会还想写写插件玩玩。抛弃 VS Code，开始 Vim 之旅感。</p>","rawMarkdownBody":"\n昨天在微信读书上面看到了池建强的《MacTalk 人生元编程》，然后花了差不多一天看完，其中有篇有关于 Vim 的文章提起了我对这个编辑器的再一次兴趣（对的，我对它感兴趣很多次了，每次都懒..）。\n\n一直懒得去慢慢配置它，又不想用别人的配置。自己用的编辑器还是想自己折腾，然后今天就趁着我对这个还有点热度赶紧折腾起来。\n\n## MacVim\n其实在命令行里面直接写代码还有有些不习惯的，所以选了 MacVim 这个 GUI 版本。这样又可以与其他编辑器一样单独打开，想小改代码的时候又可以直接打开命令行搞。\n\n在 MacTalk 的文章里面有提到 Vim 中文版本的[帮助文档](http://sourceforge.net/projects/vimcdoc/files/latest/download)，遂下载之。果然还是中文的比较浅显易懂。\n\n以前看别人的 `.vimrc` 配置，里面有些编辑器的基本配置，也不知道是哪里查的。原来这些配置可以在编辑器中输入 `:help options` 进行查看。\n\n<!--more-->\n\n### 缩进\n关于缩进的配置，主要设置了 `autoindent`, `smartindent` 和 `expandtab` 这三个选项。\n\n- `autoindent` 选项根据上一行决定新行的缩进\n- `smartindent` 选项智能自动缩进\n- `expandtab` 选项将 tab 转换为空格\n\n```\nset autoindent\nset smartindent\nset expandtab\n```\n\n### 行号\n显示行号是硬需求，但是与其他编辑器不同，在 vim 上还有相对行号。\n\n```\nset number\nset relativenumber\n```\n\n## 插件\n显而易见，手动安装 vim 插件是很麻烦很麻烦的。与 sublime text 之类的类似，vim 同样有类似的插件管理器 [Vundle](https://github.com/VundleVim/Vundle.vim)。\n\n创建文件夹 `~/.vim` 和配置文件 `~/.vimrc`，并安装 Vundle:\n\n``` bash\n$ git clone https://github.com/gmarik/vundle.git ~/.vim/bundle/vundle\n```\n\n为了方便管理再新建一个 `.vimrc.bundles` 来单独存放插件列表：\n\n```\nset nocompatible    \" be iMproved, required\nfiletype off        \" requried\nset rtp+=~/.vim/bundle/vundle/\n\ncall vundle#begin()\n\n\" Let Vundle manage Vundle\nBundle 'gmarik/vundle'\n\n\" .... 其他插件\n\ncall vundle#end()\n\" required\nfiletype plugin indent on\n```\n\n以后添加插件的时候只需要在这个文件里面添加一行：\n\n```\nBundle 'xxx'\n```\n\n安装插件输入 `:BundleInstall` 命令即可，卸载插件时删除对应的配置并运行 `:BundleClean` 删除插件。\n\n### 括号补全\n第一次用的时候，输入 `(` 居然没有自己蹦出来另外一个 `)`。这不科学，讲道理这个是一定要的。\n\n发现很多人用的是 [delimitMate](https://github.com/Raimondi/delimitMate) ，添加 `Bundle 'delimitMate'` 到 `.vimrc.bundles`，运行 `BundleInstall`。\n\n安装完直接就可以自动补全括号了。\n\n### Emmet\n很多浏览器都支持 Emmet 插件，vim 同样也有。但这个 Emmet 是第三方的，叫 [Emmet.vim](https://github.com/mattn/emmet-vim/)。\n\n安装完之后主要是设置一下出发的快捷键，默认的快捷键是 `Ctrl + y`。\n我把快捷键修改成 `Ctrl + e` 比较顺手。\n\n```\n\" Emmet.vim\nlet g:user_emmet_expandabbr_key = '<c-e>'\n```\n\n### 目录树\n目录树就基本上也就是使用 [NERDTree](https://github.com/scrooloose/nerdtree)。\n\n开启目录树的快捷键修改为 `Ctrl + b`，然后当 vim 只剩目录树显示的时候自动退出。\n```\n\" NERDTree\nmap <c-b> :NERDTreeToggle<CR>\nautocmd vimenter * NERDTree\nautocmd bufenter * if (winnr(\"$\") == 1 && exists(\"b:NERDTreeType\") &&b:NERDTreeType == \"primary\") | q | endif\n```\n\n### 代码补全\n补全用的就是大名鼎鼎的 [YouCompleteMe](https://github.com/Valloric/YouCompleteMe) 了。\n\n关于这个插件网上有很多插件，我就不啰嗦了。这里主要是抄的百度 EFE 的配置：\n\n```\n\" YouCompleteMe\n\" http://efe.baidu.com/blog/vim-javascript-completion/#youcompleteme\nlet g:ycm_min_num_of_chars_for_completion = 3\nlet g:ycm_autoclose_preview_window_after_completion=1\nlet g:ycm_complete_in_comments = 1\nlet g:ycm_key_list_select_completion = ['<c-n>', '<Down>']\nlet g:ycm_key_list_previous_completion = ['<c-p>', '<Up>']\n\" Use tab\nfunction! TabFunction ()\n    let line = getline('.')\n    let substr = strpart(line, -1, col('.')+1)\n    let substr = matchstr(substr, \"[^ \\t]*$\")\n    if strlen(substr) == 0\n        return \"\\<tab>\"\n    endif\n    return pumvisible() ? \"\\<c-n>\" : \"\\<c-x>\\<c-o>\"\nendfunction\ninoremap <tab> <c-r>=TabFunction()<cr>\n\nlet g:ycm_semantic_triggers = {\n    \\   'css': [ 're!^\\s{2}', 're!:\\s+'],\n    \\   'html': [ '</' ],\n    \\ }\n\n```\n\n## 总结\n折腾了一下午，终于算是搞定了。其实过程还是蛮好玩的，有机会还想写写插件玩玩。抛弃 VS Code，开始 Vim 之旅感。\n","frontmatter":{"title":"Vim 折腾记","date":"2017年2月19日","tags":["Vim"]}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/notes-of-vim/"}}}