{"componentChunkName":"component---src-templates-post-tsx","path":"/javascript-event-stream/","result":{"data":{"markdownRemark":{"html":"<h2>事件流</h2>\n<p>事件流描述的是从页面中接收事件的顺序。在 JavaScript 中事件流有两种，一种是由 IE 开发团队提出的事件冒泡流，而另一种是 Netscape 提出的事件捕获流。</p>\n<h3>事件冒泡</h3>\n<p>事件冒泡流，即事件开始时由具体的元素接收，然后逐级向上传播，直到 document 对象。</p>\n<pre><code class=\"language-html\">&#x3C;div>\n  &#x3C;p> Click &#x3C;/p>\n&#x3C;/div>\n</code></pre>\n<!--more-->\n<p>上面的例子中，点击 <code>p</code> 元素，事件冒泡的顺序是 p > div > body > html > document。</p>\n<p><strong>所有的现代浏览器都支持事件冒泡，部分具体实现不同。</strong></p>\n<h3>事件捕获</h3>\n<p>事件捕获流，即与事件冒泡相反，先在上级元素接收，然后逐级向下传播，直到最具体的元素。（有点像是逐级定位，到最后的元素就是事件冒泡流的起点）</p>\n<p>和上面同样的例子，点击 <code>p</code> 元素，事件捕获的顺序是 document > html > body > div > p。</p>\n<p><strong>由于老版本不支持，因此很少使用事件捕获。尽量使用事件冒泡。</strong></p>\n<h3>DOM 事件流</h3>\n<p>实际上每一次触发事件都会有一个事件流，事件流包括三个阶段，事件捕获阶段，处于目标阶段，事件冒泡阶段。</p>\n<pre><code class=\"language-html\">&#x3C;!DOCTYPE html>\n&#x3C;html>\n  &#x3C;head>\n    &#x3C;meta charset=\"utf-8\">\n    &#x3C;title> Event &#x3C;/title>\n  &#x3C;/head>\n  &#x3C;body>\n    &#x3C;div> Cilck &#x3C;/div>\n  &#x3C;/body>\n&#x3C;/html>\n</code></pre>\n<p>即在上面的例子中，事件流包括</p>\n<ul>\n<li>事件捕获阶段：document > html > body</li>\n<li>处于目标阶段：div</li>\n<li>事件冒泡阶段：body > html > document</li>\n</ul>\n<h2>事件处理程序</h2>\n<p>添加事件处理程序的方式有 3 种：使用 HTML 的特性，赋值给事件处理程序属性，使用 addEventListener 函数。</p>\n<h3>使用 HTML 的特性</h3>\n<pre><code class=\"language-html\">&#x3C;input type=\"button\" value=\"Click\" onclick=\"alert('Clicked')\">\n</code></pre>\n<p>这样就是在 HTML 中使用 HTML 中与事件处理程序同名的属性来指定。也可以将该属性的值指向页面中其他地方定义的方法。</p>\n<p>通常不建议这样做，这样写的缺点是 HTML 与 JavaScript 紧密耦合，修改起来也麻烦。</p>\n<h3>赋值给事件处理程序属性</h3>\n<p>这是 JavaScript 中指定事件处理程序的传统方式，将一个函数赋值给事件处理程序属性。</p>\n<pre><code class=\"language-html\">&#x3C;input type=\"button\" id=\"btn\" value=\"Click\">\n</code></pre>\n<pre><code class=\"language-js\">var btn = document.getElementById('btn');\nbtn.onclick = function () {\n  alert(\"Clicked\");\n};\n</code></pre>\n<p>这样的效果其实与使用 HTML 特性的例子的作用是相同的，不同的是 JavaScript 指定事件在 js 文件中，这样就与 HTML 解耦了。要删除指定的事件处理程序可以将属性的值设置为 null。</p>\n<p>赋值给事件处理程序属性的缺点在与对同一个元素的同一个事件只能添加一个事件处理程序。重复添加相同的事件会覆盖前面所添加的事件。</p>\n<pre><code class=\"language-js\">btn.onclick = function () {\n  alert(\"Clicked-01\");\n};\n\nbtn.onclick = function () {\n  alert(\"Clicked-02\");  // 覆盖了上面设置的 onclick 事件\n};\n</code></pre>\n<h3>使用 addEventListener 函数</h3>\n<p>使用 <code>addEventListener()</code> 的好处是可以添加多个同一事件的处理程序，不会像使用事件处理程序属性一样覆盖。</p>\n<p><code>addEventListener()</code> 有对应的删除事件的方法 <code>removeEventListener()</code>，两个方法都接受三个参数。要处理的事件类型（click, blur ...），作为事件处理程序的函数，以及表示是否在捕获阶段调用的布尔值。</p>\n<h4>添加事件处理程序</h4>\n<p>给按钮的 click 事件添加事件处理程序：</p>\n<pre><code class=\"language-js\">var btn = document.getElementById('btn');\nbtn.addEventListener('click', function() {\n  alert(\"click\");\n}, false);\n</code></pre>\n<p>上面为按钮添加了一个 click 事件处理程序，并且该事件会在冒泡阶段被触发。（第三个参数默认为 false, 上面的例子中可忽略不写）</p>\n<p>为同一个元素添加同一个事件的对个事件处理程序函数：</p>\n<pre><code class=\"language-js\">btn.addEventListener('click', function() {\n  alert(\"Clicked-01\");\n});\n\nbtn.addEventListener('click', function() {\n  alert(\"Clicked-02\");\n});\n</code></pre>\n<p>这里给按钮的 click 事件添加了两个事件处理程序，这两个事件处理程序会按照添加的顺序触发。首先显示 \"Clicked-01\"，然后显示 \"Clicked-02\"。</p>\n<h4>移除事件处理程序</h4>\n<p>使用 <code>addEventListener()</code> 添加的事件处理程序，可以通过 <code>removeEventListener()</code> 来移除，但是两个函数的参数必须相同。</p>\n<pre><code class=\"language-js\">var btn = document.getElementById('btn');\nfunction handler() {\n  alert(\"Cilcked\");\n}\n\nbtn.addEventListener('click', handler, false);\n\nbtn.removeEventListener('click', handler, true);  // 无效\n\nbtn.removeEventListener('click', handler, false);  // 有效\n</code></pre>\n<p>大多数情况下，都是讲事件处理程序添加到事件流的冒泡阶段，这样可以最大限度地兼容各个浏览器。只在需要在事件到达目标之截获的时候将事件处理程序添加到捕获阶段</p>","rawMarkdownBody":"\n## 事件流\n事件流描述的是从页面中接收事件的顺序。在 JavaScript 中事件流有两种，一种是由 IE 开发团队提出的事件冒泡流，而另一种是 Netscape 提出的事件捕获流。\n\n### 事件冒泡\n事件冒泡流，即事件开始时由具体的元素接收，然后逐级向上传播，直到 document 对象。\n\n```html\n<div>\n  <p> Click </p>\n</div>\n```\n<!--more-->\n\n上面的例子中，点击 `p` 元素，事件冒泡的顺序是 p > div > body > html > document。\n\n**所有的现代浏览器都支持事件冒泡，部分具体实现不同。**\n\n### 事件捕获\n事件捕获流，即与事件冒泡相反，先在上级元素接收，然后逐级向下传播，直到最具体的元素。（有点像是逐级定位，到最后的元素就是事件冒泡流的起点）\n\n和上面同样的例子，点击 `p` 元素，事件捕获的顺序是 document > html > body > div > p。\n\n**由于老版本不支持，因此很少使用事件捕获。尽量使用事件冒泡。**\n\n### DOM 事件流\n实际上每一次触发事件都会有一个事件流，事件流包括三个阶段，事件捕获阶段，处于目标阶段，事件冒泡阶段。\n\n```html\n<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf-8\">\n    <title> Event </title>\n  </head>\n  <body>\n    <div> Cilck </div>\n  </body>\n</html>\n```\n\n即在上面的例子中，事件流包括\n- 事件捕获阶段：document > html > body\n- 处于目标阶段：div\n- 事件冒泡阶段：body > html > document\n\n## 事件处理程序\n添加事件处理程序的方式有 3 种：使用 HTML 的特性，赋值给事件处理程序属性，使用 addEventListener 函数。\n\n### 使用 HTML 的特性\n\n```html\n<input type=\"button\" value=\"Click\" onclick=\"alert('Clicked')\">\n```\n\n这样就是在 HTML 中使用 HTML 中与事件处理程序同名的属性来指定。也可以将该属性的值指向页面中其他地方定义的方法。\n\n通常不建议这样做，这样写的缺点是 HTML 与 JavaScript 紧密耦合，修改起来也麻烦。\n\n### 赋值给事件处理程序属性\n\n这是 JavaScript 中指定事件处理程序的传统方式，将一个函数赋值给事件处理程序属性。\n\n```html\n<input type=\"button\" id=\"btn\" value=\"Click\">\n```\n\n```js\nvar btn = document.getElementById('btn');\nbtn.onclick = function () {\n  alert(\"Clicked\");\n};\n```\n\n这样的效果其实与使用 HTML 特性的例子的作用是相同的，不同的是 JavaScript 指定事件在 js 文件中，这样就与 HTML 解耦了。要删除指定的事件处理程序可以将属性的值设置为 null。\n\n赋值给事件处理程序属性的缺点在与对同一个元素的同一个事件只能添加一个事件处理程序。重复添加相同的事件会覆盖前面所添加的事件。\n\n```js\nbtn.onclick = function () {\n  alert(\"Clicked-01\");\n};\n\nbtn.onclick = function () {\n  alert(\"Clicked-02\");  // 覆盖了上面设置的 onclick 事件\n};\n```\n\n### 使用 addEventListener 函数\n使用 `addEventListener()` 的好处是可以添加多个同一事件的处理程序，不会像使用事件处理程序属性一样覆盖。\n\n`addEventListener()` 有对应的删除事件的方法 `removeEventListener()`，两个方法都接受三个参数。要处理的事件类型（click, blur ...），作为事件处理程序的函数，以及表示是否在捕获阶段调用的布尔值。\n\n#### 添加事件处理程序\n给按钮的 click 事件添加事件处理程序：\n```js\nvar btn = document.getElementById('btn');\nbtn.addEventListener('click', function() {\n  alert(\"click\");\n}, false);\n```\n\n上面为按钮添加了一个 click 事件处理程序，并且该事件会在冒泡阶段被触发。（第三个参数默认为 false, 上面的例子中可忽略不写）\n\n为同一个元素添加同一个事件的对个事件处理程序函数：\n```js\nbtn.addEventListener('click', function() {\n  alert(\"Clicked-01\");\n});\n\nbtn.addEventListener('click', function() {\n  alert(\"Clicked-02\");\n});\n```\n\n这里给按钮的 click 事件添加了两个事件处理程序，这两个事件处理程序会按照添加的顺序触发。首先显示 \"Clicked-01\"，然后显示 \"Clicked-02\"。\n\n#### 移除事件处理程序\n使用 `addEventListener()` 添加的事件处理程序，可以通过 `removeEventListener()` 来移除，但是两个函数的参数必须相同。\n\n```js\nvar btn = document.getElementById('btn');\nfunction handler() {\n  alert(\"Cilcked\");\n}\n\nbtn.addEventListener('click', handler, false);\n\nbtn.removeEventListener('click', handler, true);  // 无效\n\nbtn.removeEventListener('click', handler, false);  // 有效\n```\n\n大多数情况下，都是讲事件处理程序添加到事件流的冒泡阶段，这样可以最大限度地兼容各个浏览器。只在需要在事件到达目标之截获的时候将事件处理程序添加到捕获阶段\n","frontmatter":{"title":"事件流：冒泡与捕获","date":"2016年4月16日","tags":["JavaScript","前端"]}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/javascript-event-stream/"}}}